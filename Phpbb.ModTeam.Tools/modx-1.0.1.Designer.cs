//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Phpbb.ModTeam.Tools.Xml {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("mod")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class mod : System.Data.DataSet {
        
        private headerDataTable tableheader;
        
        private titleDataTable tabletitle;
        
        private descriptionDataTable tabledescription;
        
        private _author_notesDataTable table_author_notes;
        
        private _author_groupDataTable table_author_group;
        
        private authorDataTable tableauthor;
        
        private contributionsDataTable tablecontributions;
        
        private _mod_versionDataTable table_mod_version;
        
        private installationDataTable tableinstallation;
        
        private _target_versionDataTable table_target_version;
        
        private _target_majorDataTable table_target_major;
        
        private _target_minorDataTable table_target_minor;
        
        private _target_revisionDataTable table_target_revision;
        
        private _target_releaseDataTable table_target_release;
        
        private historyDataTable tablehistory;
        
        private entryDataTable tableentry;
        
        private _rev_versionDataTable table_rev_version;
        
        private changelogDataTable tablechangelog;
        
        private changeDataTable tablechange;
        
        private metaDataTable tablemeta;
        
        private _action_groupDataTable table_action_group;
        
        private sqlDataTable tablesql;
        
        private copyDataTable tablecopy;
        
        private fileDataTable tablefile;
        
        private openDataTable tableopen;
        
        private editDataTable tableedit;
        
        private findDataTable tablefind;
        
        private actionDataTable tableaction;
        
        private _inline_editDataTable table_inline_edit;
        
        private _inline_findDataTable table_inline_find;
        
        private _inline_actionDataTable table_inline_action;
        
        private commentDataTable tablecomment;
        
        private _diy_instructionsDataTable table_diy_instructions;
        
        private System.Data.DataRelation relationheader_title;
        
        private System.Data.DataRelation relationheader_description;
        
        private System.Data.DataRelation _relationheader_author_notes;
        
        private System.Data.DataRelation _relationheader_author_group;
        
        private System.Data.DataRelation _relationauthor_group_author;
        
        private System.Data.DataRelation relationauthor_contributions;
        
        private System.Data.DataRelation _relationheader_mod_version;
        
        private System.Data.DataRelation relationheader_installation;
        
        private System.Data.DataRelation _relationinstallation_target_version;
        
        private System.Data.DataRelation _relationtarget_version_target_major;
        
        private System.Data.DataRelation _relationtarget_version_target_minor;
        
        private System.Data.DataRelation _relationtarget_version_target_revision;
        
        private System.Data.DataRelation _relationtarget_version_target_release;
        
        private System.Data.DataRelation relationheader_history;
        
        private System.Data.DataRelation relationhistory_entry;
        
        private System.Data.DataRelation _relationentry_rev_version;
        
        private System.Data.DataRelation relationentry_changelog;
        
        private System.Data.DataRelation relationchangelog_change;
        
        private System.Data.DataRelation relationheader_meta;
        
        private System.Data.DataRelation _relationaction_group_sql;
        
        private System.Data.DataRelation _relationaction_group_copy;
        
        private System.Data.DataRelation relationcopy_file;
        
        private System.Data.DataRelation _relationaction_group_open;
        
        private System.Data.DataRelation relationopen_edit;
        
        private System.Data.DataRelation relationedit_find;
        
        private System.Data.DataRelation relationedit_action;
        
        private System.Data.DataRelation _relationedit_inline_edit;
        
        private System.Data.DataRelation _relationinline_edit_inline_find;
        
        private System.Data.DataRelation _relationinline_edit_inline_action;
        
        private System.Data.DataRelation relationedit_comment;
        
        private System.Data.DataRelation _relationaction_group_diy_instructions;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public mod() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected mod(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["header"] != null)) {
                    base.Tables.Add(new headerDataTable(ds.Tables["header"]));
                }
                if ((ds.Tables["title"] != null)) {
                    base.Tables.Add(new titleDataTable(ds.Tables["title"]));
                }
                if ((ds.Tables["description"] != null)) {
                    base.Tables.Add(new descriptionDataTable(ds.Tables["description"]));
                }
                if ((ds.Tables["author-notes"] != null)) {
                    base.Tables.Add(new _author_notesDataTable(ds.Tables["author-notes"]));
                }
                if ((ds.Tables["author-group"] != null)) {
                    base.Tables.Add(new _author_groupDataTable(ds.Tables["author-group"]));
                }
                if ((ds.Tables["author"] != null)) {
                    base.Tables.Add(new authorDataTable(ds.Tables["author"]));
                }
                if ((ds.Tables["contributions"] != null)) {
                    base.Tables.Add(new contributionsDataTable(ds.Tables["contributions"]));
                }
                if ((ds.Tables["mod-version"] != null)) {
                    base.Tables.Add(new _mod_versionDataTable(ds.Tables["mod-version"]));
                }
                if ((ds.Tables["installation"] != null)) {
                    base.Tables.Add(new installationDataTable(ds.Tables["installation"]));
                }
                if ((ds.Tables["target-version"] != null)) {
                    base.Tables.Add(new _target_versionDataTable(ds.Tables["target-version"]));
                }
                if ((ds.Tables["target-major"] != null)) {
                    base.Tables.Add(new _target_majorDataTable(ds.Tables["target-major"]));
                }
                if ((ds.Tables["target-minor"] != null)) {
                    base.Tables.Add(new _target_minorDataTable(ds.Tables["target-minor"]));
                }
                if ((ds.Tables["target-revision"] != null)) {
                    base.Tables.Add(new _target_revisionDataTable(ds.Tables["target-revision"]));
                }
                if ((ds.Tables["target-release"] != null)) {
                    base.Tables.Add(new _target_releaseDataTable(ds.Tables["target-release"]));
                }
                if ((ds.Tables["history"] != null)) {
                    base.Tables.Add(new historyDataTable(ds.Tables["history"]));
                }
                if ((ds.Tables["entry"] != null)) {
                    base.Tables.Add(new entryDataTable(ds.Tables["entry"]));
                }
                if ((ds.Tables["rev-version"] != null)) {
                    base.Tables.Add(new _rev_versionDataTable(ds.Tables["rev-version"]));
                }
                if ((ds.Tables["changelog"] != null)) {
                    base.Tables.Add(new changelogDataTable(ds.Tables["changelog"]));
                }
                if ((ds.Tables["change"] != null)) {
                    base.Tables.Add(new changeDataTable(ds.Tables["change"]));
                }
                if ((ds.Tables["meta"] != null)) {
                    base.Tables.Add(new metaDataTable(ds.Tables["meta"]));
                }
                if ((ds.Tables["action-group"] != null)) {
                    base.Tables.Add(new _action_groupDataTable(ds.Tables["action-group"]));
                }
                if ((ds.Tables["sql"] != null)) {
                    base.Tables.Add(new sqlDataTable(ds.Tables["sql"]));
                }
                if ((ds.Tables["copy"] != null)) {
                    base.Tables.Add(new copyDataTable(ds.Tables["copy"]));
                }
                if ((ds.Tables["file"] != null)) {
                    base.Tables.Add(new fileDataTable(ds.Tables["file"]));
                }
                if ((ds.Tables["open"] != null)) {
                    base.Tables.Add(new openDataTable(ds.Tables["open"]));
                }
                if ((ds.Tables["edit"] != null)) {
                    base.Tables.Add(new editDataTable(ds.Tables["edit"]));
                }
                if ((ds.Tables["find"] != null)) {
                    base.Tables.Add(new findDataTable(ds.Tables["find"]));
                }
                if ((ds.Tables["action"] != null)) {
                    base.Tables.Add(new actionDataTable(ds.Tables["action"]));
                }
                if ((ds.Tables["inline-edit"] != null)) {
                    base.Tables.Add(new _inline_editDataTable(ds.Tables["inline-edit"]));
                }
                if ((ds.Tables["inline-find"] != null)) {
                    base.Tables.Add(new _inline_findDataTable(ds.Tables["inline-find"]));
                }
                if ((ds.Tables["inline-action"] != null)) {
                    base.Tables.Add(new _inline_actionDataTable(ds.Tables["inline-action"]));
                }
                if ((ds.Tables["comment"] != null)) {
                    base.Tables.Add(new commentDataTable(ds.Tables["comment"]));
                }
                if ((ds.Tables["diy-instructions"] != null)) {
                    base.Tables.Add(new _diy_instructionsDataTable(ds.Tables["diy-instructions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public headerDataTable header {
            get {
                return this.tableheader;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public titleDataTable title {
            get {
                return this.tabletitle;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public descriptionDataTable description {
            get {
                return this.tabledescription;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _author_notesDataTable _author_notes {
            get {
                return this.table_author_notes;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _author_groupDataTable _author_group {
            get {
                return this.table_author_group;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public authorDataTable author {
            get {
                return this.tableauthor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public contributionsDataTable contributions {
            get {
                return this.tablecontributions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _mod_versionDataTable _mod_version {
            get {
                return this.table_mod_version;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public installationDataTable installation {
            get {
                return this.tableinstallation;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _target_versionDataTable _target_version {
            get {
                return this.table_target_version;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _target_majorDataTable _target_major {
            get {
                return this.table_target_major;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _target_minorDataTable _target_minor {
            get {
                return this.table_target_minor;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _target_revisionDataTable _target_revision {
            get {
                return this.table_target_revision;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _target_releaseDataTable _target_release {
            get {
                return this.table_target_release;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public historyDataTable history {
            get {
                return this.tablehistory;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public entryDataTable entry {
            get {
                return this.tableentry;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _rev_versionDataTable _rev_version {
            get {
                return this.table_rev_version;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public changelogDataTable changelog {
            get {
                return this.tablechangelog;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public changeDataTable change {
            get {
                return this.tablechange;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public metaDataTable meta {
            get {
                return this.tablemeta;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _action_groupDataTable _action_group {
            get {
                return this.table_action_group;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sqlDataTable sql {
            get {
                return this.tablesql;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public copyDataTable copy {
            get {
                return this.tablecopy;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fileDataTable file {
            get {
                return this.tablefile;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public openDataTable open {
            get {
                return this.tableopen;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public editDataTable edit {
            get {
                return this.tableedit;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public findDataTable find {
            get {
                return this.tablefind;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public actionDataTable action {
            get {
                return this.tableaction;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _inline_editDataTable _inline_edit {
            get {
                return this.table_inline_edit;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _inline_findDataTable _inline_find {
            get {
                return this.table_inline_find;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _inline_actionDataTable _inline_action {
            get {
                return this.table_inline_action;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public commentDataTable comment {
            get {
                return this.tablecomment;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _diy_instructionsDataTable _diy_instructions {
            get {
                return this.table_diy_instructions;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            mod cln = ((mod)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["header"] != null)) {
                    base.Tables.Add(new headerDataTable(ds.Tables["header"]));
                }
                if ((ds.Tables["title"] != null)) {
                    base.Tables.Add(new titleDataTable(ds.Tables["title"]));
                }
                if ((ds.Tables["description"] != null)) {
                    base.Tables.Add(new descriptionDataTable(ds.Tables["description"]));
                }
                if ((ds.Tables["author-notes"] != null)) {
                    base.Tables.Add(new _author_notesDataTable(ds.Tables["author-notes"]));
                }
                if ((ds.Tables["author-group"] != null)) {
                    base.Tables.Add(new _author_groupDataTable(ds.Tables["author-group"]));
                }
                if ((ds.Tables["author"] != null)) {
                    base.Tables.Add(new authorDataTable(ds.Tables["author"]));
                }
                if ((ds.Tables["contributions"] != null)) {
                    base.Tables.Add(new contributionsDataTable(ds.Tables["contributions"]));
                }
                if ((ds.Tables["mod-version"] != null)) {
                    base.Tables.Add(new _mod_versionDataTable(ds.Tables["mod-version"]));
                }
                if ((ds.Tables["installation"] != null)) {
                    base.Tables.Add(new installationDataTable(ds.Tables["installation"]));
                }
                if ((ds.Tables["target-version"] != null)) {
                    base.Tables.Add(new _target_versionDataTable(ds.Tables["target-version"]));
                }
                if ((ds.Tables["target-major"] != null)) {
                    base.Tables.Add(new _target_majorDataTable(ds.Tables["target-major"]));
                }
                if ((ds.Tables["target-minor"] != null)) {
                    base.Tables.Add(new _target_minorDataTable(ds.Tables["target-minor"]));
                }
                if ((ds.Tables["target-revision"] != null)) {
                    base.Tables.Add(new _target_revisionDataTable(ds.Tables["target-revision"]));
                }
                if ((ds.Tables["target-release"] != null)) {
                    base.Tables.Add(new _target_releaseDataTable(ds.Tables["target-release"]));
                }
                if ((ds.Tables["history"] != null)) {
                    base.Tables.Add(new historyDataTable(ds.Tables["history"]));
                }
                if ((ds.Tables["entry"] != null)) {
                    base.Tables.Add(new entryDataTable(ds.Tables["entry"]));
                }
                if ((ds.Tables["rev-version"] != null)) {
                    base.Tables.Add(new _rev_versionDataTable(ds.Tables["rev-version"]));
                }
                if ((ds.Tables["changelog"] != null)) {
                    base.Tables.Add(new changelogDataTable(ds.Tables["changelog"]));
                }
                if ((ds.Tables["change"] != null)) {
                    base.Tables.Add(new changeDataTable(ds.Tables["change"]));
                }
                if ((ds.Tables["meta"] != null)) {
                    base.Tables.Add(new metaDataTable(ds.Tables["meta"]));
                }
                if ((ds.Tables["action-group"] != null)) {
                    base.Tables.Add(new _action_groupDataTable(ds.Tables["action-group"]));
                }
                if ((ds.Tables["sql"] != null)) {
                    base.Tables.Add(new sqlDataTable(ds.Tables["sql"]));
                }
                if ((ds.Tables["copy"] != null)) {
                    base.Tables.Add(new copyDataTable(ds.Tables["copy"]));
                }
                if ((ds.Tables["file"] != null)) {
                    base.Tables.Add(new fileDataTable(ds.Tables["file"]));
                }
                if ((ds.Tables["open"] != null)) {
                    base.Tables.Add(new openDataTable(ds.Tables["open"]));
                }
                if ((ds.Tables["edit"] != null)) {
                    base.Tables.Add(new editDataTable(ds.Tables["edit"]));
                }
                if ((ds.Tables["find"] != null)) {
                    base.Tables.Add(new findDataTable(ds.Tables["find"]));
                }
                if ((ds.Tables["action"] != null)) {
                    base.Tables.Add(new actionDataTable(ds.Tables["action"]));
                }
                if ((ds.Tables["inline-edit"] != null)) {
                    base.Tables.Add(new _inline_editDataTable(ds.Tables["inline-edit"]));
                }
                if ((ds.Tables["inline-find"] != null)) {
                    base.Tables.Add(new _inline_findDataTable(ds.Tables["inline-find"]));
                }
                if ((ds.Tables["inline-action"] != null)) {
                    base.Tables.Add(new _inline_actionDataTable(ds.Tables["inline-action"]));
                }
                if ((ds.Tables["comment"] != null)) {
                    base.Tables.Add(new commentDataTable(ds.Tables["comment"]));
                }
                if ((ds.Tables["diy-instructions"] != null)) {
                    base.Tables.Add(new _diy_instructionsDataTable(ds.Tables["diy-instructions"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableheader = ((headerDataTable)(base.Tables["header"]));
            if ((initTable == true)) {
                if ((this.tableheader != null)) {
                    this.tableheader.InitVars();
                }
            }
            this.tabletitle = ((titleDataTable)(base.Tables["title"]));
            if ((initTable == true)) {
                if ((this.tabletitle != null)) {
                    this.tabletitle.InitVars();
                }
            }
            this.tabledescription = ((descriptionDataTable)(base.Tables["description"]));
            if ((initTable == true)) {
                if ((this.tabledescription != null)) {
                    this.tabledescription.InitVars();
                }
            }
            this.table_author_notes = ((_author_notesDataTable)(base.Tables["author-notes"]));
            if ((initTable == true)) {
                if ((this.table_author_notes != null)) {
                    this.table_author_notes.InitVars();
                }
            }
            this.table_author_group = ((_author_groupDataTable)(base.Tables["author-group"]));
            if ((initTable == true)) {
                if ((this.table_author_group != null)) {
                    this.table_author_group.InitVars();
                }
            }
            this.tableauthor = ((authorDataTable)(base.Tables["author"]));
            if ((initTable == true)) {
                if ((this.tableauthor != null)) {
                    this.tableauthor.InitVars();
                }
            }
            this.tablecontributions = ((contributionsDataTable)(base.Tables["contributions"]));
            if ((initTable == true)) {
                if ((this.tablecontributions != null)) {
                    this.tablecontributions.InitVars();
                }
            }
            this.table_mod_version = ((_mod_versionDataTable)(base.Tables["mod-version"]));
            if ((initTable == true)) {
                if ((this.table_mod_version != null)) {
                    this.table_mod_version.InitVars();
                }
            }
            this.tableinstallation = ((installationDataTable)(base.Tables["installation"]));
            if ((initTable == true)) {
                if ((this.tableinstallation != null)) {
                    this.tableinstallation.InitVars();
                }
            }
            this.table_target_version = ((_target_versionDataTable)(base.Tables["target-version"]));
            if ((initTable == true)) {
                if ((this.table_target_version != null)) {
                    this.table_target_version.InitVars();
                }
            }
            this.table_target_major = ((_target_majorDataTable)(base.Tables["target-major"]));
            if ((initTable == true)) {
                if ((this.table_target_major != null)) {
                    this.table_target_major.InitVars();
                }
            }
            this.table_target_minor = ((_target_minorDataTable)(base.Tables["target-minor"]));
            if ((initTable == true)) {
                if ((this.table_target_minor != null)) {
                    this.table_target_minor.InitVars();
                }
            }
            this.table_target_revision = ((_target_revisionDataTable)(base.Tables["target-revision"]));
            if ((initTable == true)) {
                if ((this.table_target_revision != null)) {
                    this.table_target_revision.InitVars();
                }
            }
            this.table_target_release = ((_target_releaseDataTable)(base.Tables["target-release"]));
            if ((initTable == true)) {
                if ((this.table_target_release != null)) {
                    this.table_target_release.InitVars();
                }
            }
            this.tablehistory = ((historyDataTable)(base.Tables["history"]));
            if ((initTable == true)) {
                if ((this.tablehistory != null)) {
                    this.tablehistory.InitVars();
                }
            }
            this.tableentry = ((entryDataTable)(base.Tables["entry"]));
            if ((initTable == true)) {
                if ((this.tableentry != null)) {
                    this.tableentry.InitVars();
                }
            }
            this.table_rev_version = ((_rev_versionDataTable)(base.Tables["rev-version"]));
            if ((initTable == true)) {
                if ((this.table_rev_version != null)) {
                    this.table_rev_version.InitVars();
                }
            }
            this.tablechangelog = ((changelogDataTable)(base.Tables["changelog"]));
            if ((initTable == true)) {
                if ((this.tablechangelog != null)) {
                    this.tablechangelog.InitVars();
                }
            }
            this.tablechange = ((changeDataTable)(base.Tables["change"]));
            if ((initTable == true)) {
                if ((this.tablechange != null)) {
                    this.tablechange.InitVars();
                }
            }
            this.tablemeta = ((metaDataTable)(base.Tables["meta"]));
            if ((initTable == true)) {
                if ((this.tablemeta != null)) {
                    this.tablemeta.InitVars();
                }
            }
            this.table_action_group = ((_action_groupDataTable)(base.Tables["action-group"]));
            if ((initTable == true)) {
                if ((this.table_action_group != null)) {
                    this.table_action_group.InitVars();
                }
            }
            this.tablesql = ((sqlDataTable)(base.Tables["sql"]));
            if ((initTable == true)) {
                if ((this.tablesql != null)) {
                    this.tablesql.InitVars();
                }
            }
            this.tablecopy = ((copyDataTable)(base.Tables["copy"]));
            if ((initTable == true)) {
                if ((this.tablecopy != null)) {
                    this.tablecopy.InitVars();
                }
            }
            this.tablefile = ((fileDataTable)(base.Tables["file"]));
            if ((initTable == true)) {
                if ((this.tablefile != null)) {
                    this.tablefile.InitVars();
                }
            }
            this.tableopen = ((openDataTable)(base.Tables["open"]));
            if ((initTable == true)) {
                if ((this.tableopen != null)) {
                    this.tableopen.InitVars();
                }
            }
            this.tableedit = ((editDataTable)(base.Tables["edit"]));
            if ((initTable == true)) {
                if ((this.tableedit != null)) {
                    this.tableedit.InitVars();
                }
            }
            this.tablefind = ((findDataTable)(base.Tables["find"]));
            if ((initTable == true)) {
                if ((this.tablefind != null)) {
                    this.tablefind.InitVars();
                }
            }
            this.tableaction = ((actionDataTable)(base.Tables["action"]));
            if ((initTable == true)) {
                if ((this.tableaction != null)) {
                    this.tableaction.InitVars();
                }
            }
            this.table_inline_edit = ((_inline_editDataTable)(base.Tables["inline-edit"]));
            if ((initTable == true)) {
                if ((this.table_inline_edit != null)) {
                    this.table_inline_edit.InitVars();
                }
            }
            this.table_inline_find = ((_inline_findDataTable)(base.Tables["inline-find"]));
            if ((initTable == true)) {
                if ((this.table_inline_find != null)) {
                    this.table_inline_find.InitVars();
                }
            }
            this.table_inline_action = ((_inline_actionDataTable)(base.Tables["inline-action"]));
            if ((initTable == true)) {
                if ((this.table_inline_action != null)) {
                    this.table_inline_action.InitVars();
                }
            }
            this.tablecomment = ((commentDataTable)(base.Tables["comment"]));
            if ((initTable == true)) {
                if ((this.tablecomment != null)) {
                    this.tablecomment.InitVars();
                }
            }
            this.table_diy_instructions = ((_diy_instructionsDataTable)(base.Tables["diy-instructions"]));
            if ((initTable == true)) {
                if ((this.table_diy_instructions != null)) {
                    this.table_diy_instructions.InitVars();
                }
            }
            this.relationheader_title = this.Relations["header_title"];
            this.relationheader_description = this.Relations["header_description"];
            this._relationheader_author_notes = this.Relations["header_author-notes"];
            this._relationheader_author_group = this.Relations["header_author-group"];
            this._relationauthor_group_author = this.Relations["author-group_author"];
            this.relationauthor_contributions = this.Relations["author_contributions"];
            this._relationheader_mod_version = this.Relations["header_mod-version"];
            this.relationheader_installation = this.Relations["header_installation"];
            this._relationinstallation_target_version = this.Relations["installation_target-version"];
            this._relationtarget_version_target_major = this.Relations["target-version_target-major"];
            this._relationtarget_version_target_minor = this.Relations["target-version_target-minor"];
            this._relationtarget_version_target_revision = this.Relations["target-version_target-revision"];
            this._relationtarget_version_target_release = this.Relations["target-version_target-release"];
            this.relationheader_history = this.Relations["header_history"];
            this.relationhistory_entry = this.Relations["history_entry"];
            this._relationentry_rev_version = this.Relations["entry_rev-version"];
            this.relationentry_changelog = this.Relations["entry_changelog"];
            this.relationchangelog_change = this.Relations["changelog_change"];
            this.relationheader_meta = this.Relations["header_meta"];
            this._relationaction_group_sql = this.Relations["action-group_sql"];
            this._relationaction_group_copy = this.Relations["action-group_copy"];
            this.relationcopy_file = this.Relations["copy_file"];
            this._relationaction_group_open = this.Relations["action-group_open"];
            this.relationopen_edit = this.Relations["open_edit"];
            this.relationedit_find = this.Relations["edit_find"];
            this.relationedit_action = this.Relations["edit_action"];
            this._relationedit_inline_edit = this.Relations["edit_inline-edit"];
            this._relationinline_edit_inline_find = this.Relations["inline-edit_inline-find"];
            this._relationinline_edit_inline_action = this.Relations["inline-edit_inline-action"];
            this.relationedit_comment = this.Relations["edit_comment"];
            this._relationaction_group_diy_instructions = this.Relations["action-group_diy-instructions"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "mod";
            this.Prefix = "";
            this.Namespace = "http://www.phpbb.com/mods/xml/modx-1.0.1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-AU");
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableheader = new headerDataTable();
            base.Tables.Add(this.tableheader);
            this.tabletitle = new titleDataTable();
            base.Tables.Add(this.tabletitle);
            this.tabledescription = new descriptionDataTable();
            base.Tables.Add(this.tabledescription);
            this.table_author_notes = new _author_notesDataTable();
            base.Tables.Add(this.table_author_notes);
            this.table_author_group = new _author_groupDataTable();
            base.Tables.Add(this.table_author_group);
            this.tableauthor = new authorDataTable();
            base.Tables.Add(this.tableauthor);
            this.tablecontributions = new contributionsDataTable();
            base.Tables.Add(this.tablecontributions);
            this.table_mod_version = new _mod_versionDataTable();
            base.Tables.Add(this.table_mod_version);
            this.tableinstallation = new installationDataTable();
            base.Tables.Add(this.tableinstallation);
            this.table_target_version = new _target_versionDataTable();
            base.Tables.Add(this.table_target_version);
            this.table_target_major = new _target_majorDataTable();
            base.Tables.Add(this.table_target_major);
            this.table_target_minor = new _target_minorDataTable();
            base.Tables.Add(this.table_target_minor);
            this.table_target_revision = new _target_revisionDataTable();
            base.Tables.Add(this.table_target_revision);
            this.table_target_release = new _target_releaseDataTable();
            base.Tables.Add(this.table_target_release);
            this.tablehistory = new historyDataTable();
            base.Tables.Add(this.tablehistory);
            this.tableentry = new entryDataTable();
            base.Tables.Add(this.tableentry);
            this.table_rev_version = new _rev_versionDataTable();
            base.Tables.Add(this.table_rev_version);
            this.tablechangelog = new changelogDataTable();
            base.Tables.Add(this.tablechangelog);
            this.tablechange = new changeDataTable();
            base.Tables.Add(this.tablechange);
            this.tablemeta = new metaDataTable();
            base.Tables.Add(this.tablemeta);
            this.table_action_group = new _action_groupDataTable();
            base.Tables.Add(this.table_action_group);
            this.tablesql = new sqlDataTable();
            base.Tables.Add(this.tablesql);
            this.tablecopy = new copyDataTable();
            base.Tables.Add(this.tablecopy);
            this.tablefile = new fileDataTable();
            base.Tables.Add(this.tablefile);
            this.tableopen = new openDataTable();
            base.Tables.Add(this.tableopen);
            this.tableedit = new editDataTable();
            base.Tables.Add(this.tableedit);
            this.tablefind = new findDataTable();
            base.Tables.Add(this.tablefind);
            this.tableaction = new actionDataTable();
            base.Tables.Add(this.tableaction);
            this.table_inline_edit = new _inline_editDataTable();
            base.Tables.Add(this.table_inline_edit);
            this.table_inline_find = new _inline_findDataTable();
            base.Tables.Add(this.table_inline_find);
            this.table_inline_action = new _inline_actionDataTable();
            base.Tables.Add(this.table_inline_action);
            this.tablecomment = new commentDataTable();
            base.Tables.Add(this.tablecomment);
            this.table_diy_instructions = new _diy_instructionsDataTable();
            base.Tables.Add(this.table_diy_instructions);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("header_title", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tabletitle.header_IdColumn});
            this.tabletitle.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("header_description", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tabledescription.header_IdColumn});
            this.tabledescription.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("header_author-notes", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.table_author_notes.header_IdColumn});
            this.table_author_notes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("header_author-group", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.table_author_group.header_IdColumn});
            this.table_author_group.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("author-group_author", new System.Data.DataColumn[] {
                        this.table_author_group._author_group_IdColumn}, new System.Data.DataColumn[] {
                        this.tableauthor._author_group_IdColumn});
            this.tableauthor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("author_contributions", new System.Data.DataColumn[] {
                        this.tableauthor.author_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecontributions.author_IdColumn});
            this.tablecontributions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("header_mod-version", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.table_mod_version.header_IdColumn});
            this.table_mod_version.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("header_installation", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tableinstallation.header_IdColumn});
            this.tableinstallation.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("installation_target-version", new System.Data.DataColumn[] {
                        this.tableinstallation.installation_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_version.installation_IdColumn});
            this.table_target_version.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("target-version_target-major", new System.Data.DataColumn[] {
                        this.table_target_version._target_version_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_major._target_version_IdColumn});
            this.table_target_major.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("target-version_target-minor", new System.Data.DataColumn[] {
                        this.table_target_version._target_version_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_minor._target_version_IdColumn});
            this.table_target_minor.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("target-version_target-revision", new System.Data.DataColumn[] {
                        this.table_target_version._target_version_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_revision._target_version_IdColumn});
            this.table_target_revision.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("target-version_target-release", new System.Data.DataColumn[] {
                        this.table_target_version._target_version_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_release._target_version_IdColumn});
            this.table_target_release.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("header_history", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tablehistory.header_IdColumn});
            this.tablehistory.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("history_entry", new System.Data.DataColumn[] {
                        this.tablehistory.history_IdColumn}, new System.Data.DataColumn[] {
                        this.tableentry.history_IdColumn});
            this.tableentry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("entry_rev-version", new System.Data.DataColumn[] {
                        this.tableentry.entry_IdColumn}, new System.Data.DataColumn[] {
                        this.table_rev_version.entry_IdColumn});
            this.table_rev_version.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("entry_changelog", new System.Data.DataColumn[] {
                        this.tableentry.entry_IdColumn}, new System.Data.DataColumn[] {
                        this.tablechangelog.entry_IdColumn});
            this.tablechangelog.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("changelog_change", new System.Data.DataColumn[] {
                        this.tablechangelog.changelog_IdColumn}, new System.Data.DataColumn[] {
                        this.tablechange.changelog_IdColumn});
            this.tablechange.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("header_meta", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tablemeta.header_IdColumn});
            this.tablemeta.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("action-group_sql", new System.Data.DataColumn[] {
                        this.table_action_group._action_group_IdColumn}, new System.Data.DataColumn[] {
                        this.tablesql._action_group_IdColumn});
            this.tablesql.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("action-group_copy", new System.Data.DataColumn[] {
                        this.table_action_group._action_group_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecopy._action_group_IdColumn});
            this.tablecopy.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("copy_file", new System.Data.DataColumn[] {
                        this.tablecopy.copy_IdColumn}, new System.Data.DataColumn[] {
                        this.tablefile.copy_IdColumn});
            this.tablefile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("action-group_open", new System.Data.DataColumn[] {
                        this.table_action_group._action_group_IdColumn}, new System.Data.DataColumn[] {
                        this.tableopen._action_group_IdColumn});
            this.tableopen.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("open_edit", new System.Data.DataColumn[] {
                        this.tableopen.open_IdColumn}, new System.Data.DataColumn[] {
                        this.tableedit.open_IdColumn});
            this.tableedit.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("edit_find", new System.Data.DataColumn[] {
                        this.tableedit.edit_IdColumn}, new System.Data.DataColumn[] {
                        this.tablefind.edit_IdColumn});
            this.tablefind.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("edit_action", new System.Data.DataColumn[] {
                        this.tableedit.edit_IdColumn}, new System.Data.DataColumn[] {
                        this.tableaction.edit_IdColumn});
            this.tableaction.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("edit_inline-edit", new System.Data.DataColumn[] {
                        this.tableedit.edit_IdColumn}, new System.Data.DataColumn[] {
                        this.table_inline_edit.edit_IdColumn});
            this.table_inline_edit.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("inline-edit_inline-find", new System.Data.DataColumn[] {
                        this.table_inline_edit._inline_edit_IdColumn}, new System.Data.DataColumn[] {
                        this.table_inline_find._inline_edit_IdColumn});
            this.table_inline_find.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("inline-edit_inline-action", new System.Data.DataColumn[] {
                        this.table_inline_edit._inline_edit_IdColumn}, new System.Data.DataColumn[] {
                        this.table_inline_action._inline_edit_IdColumn});
            this.table_inline_action.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("edit_comment", new System.Data.DataColumn[] {
                        this.tableedit.edit_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecomment.edit_IdColumn});
            this.tablecomment.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("action-group_diy-instructions", new System.Data.DataColumn[] {
                        this.table_action_group._action_group_IdColumn}, new System.Data.DataColumn[] {
                        this.table_diy_instructions._action_group_IdColumn});
            this.table_diy_instructions.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationheader_title = new System.Data.DataRelation("header_title", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tabletitle.header_IdColumn}, false);
            this.relationheader_title.Nested = true;
            this.Relations.Add(this.relationheader_title);
            this.relationheader_description = new System.Data.DataRelation("header_description", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tabledescription.header_IdColumn}, false);
            this.relationheader_description.Nested = true;
            this.Relations.Add(this.relationheader_description);
            this._relationheader_author_notes = new System.Data.DataRelation("header_author-notes", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.table_author_notes.header_IdColumn}, false);
            this._relationheader_author_notes.Nested = true;
            this.Relations.Add(this._relationheader_author_notes);
            this._relationheader_author_group = new System.Data.DataRelation("header_author-group", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.table_author_group.header_IdColumn}, false);
            this._relationheader_author_group.Nested = true;
            this.Relations.Add(this._relationheader_author_group);
            this._relationauthor_group_author = new System.Data.DataRelation("author-group_author", new System.Data.DataColumn[] {
                        this.table_author_group._author_group_IdColumn}, new System.Data.DataColumn[] {
                        this.tableauthor._author_group_IdColumn}, false);
            this._relationauthor_group_author.Nested = true;
            this.Relations.Add(this._relationauthor_group_author);
            this.relationauthor_contributions = new System.Data.DataRelation("author_contributions", new System.Data.DataColumn[] {
                        this.tableauthor.author_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecontributions.author_IdColumn}, false);
            this.relationauthor_contributions.Nested = true;
            this.Relations.Add(this.relationauthor_contributions);
            this._relationheader_mod_version = new System.Data.DataRelation("header_mod-version", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.table_mod_version.header_IdColumn}, false);
            this._relationheader_mod_version.Nested = true;
            this.Relations.Add(this._relationheader_mod_version);
            this.relationheader_installation = new System.Data.DataRelation("header_installation", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tableinstallation.header_IdColumn}, false);
            this.relationheader_installation.Nested = true;
            this.Relations.Add(this.relationheader_installation);
            this._relationinstallation_target_version = new System.Data.DataRelation("installation_target-version", new System.Data.DataColumn[] {
                        this.tableinstallation.installation_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_version.installation_IdColumn}, false);
            this._relationinstallation_target_version.Nested = true;
            this.Relations.Add(this._relationinstallation_target_version);
            this._relationtarget_version_target_major = new System.Data.DataRelation("target-version_target-major", new System.Data.DataColumn[] {
                        this.table_target_version._target_version_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_major._target_version_IdColumn}, false);
            this._relationtarget_version_target_major.Nested = true;
            this.Relations.Add(this._relationtarget_version_target_major);
            this._relationtarget_version_target_minor = new System.Data.DataRelation("target-version_target-minor", new System.Data.DataColumn[] {
                        this.table_target_version._target_version_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_minor._target_version_IdColumn}, false);
            this._relationtarget_version_target_minor.Nested = true;
            this.Relations.Add(this._relationtarget_version_target_minor);
            this._relationtarget_version_target_revision = new System.Data.DataRelation("target-version_target-revision", new System.Data.DataColumn[] {
                        this.table_target_version._target_version_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_revision._target_version_IdColumn}, false);
            this._relationtarget_version_target_revision.Nested = true;
            this.Relations.Add(this._relationtarget_version_target_revision);
            this._relationtarget_version_target_release = new System.Data.DataRelation("target-version_target-release", new System.Data.DataColumn[] {
                        this.table_target_version._target_version_IdColumn}, new System.Data.DataColumn[] {
                        this.table_target_release._target_version_IdColumn}, false);
            this._relationtarget_version_target_release.Nested = true;
            this.Relations.Add(this._relationtarget_version_target_release);
            this.relationheader_history = new System.Data.DataRelation("header_history", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tablehistory.header_IdColumn}, false);
            this.relationheader_history.Nested = true;
            this.Relations.Add(this.relationheader_history);
            this.relationhistory_entry = new System.Data.DataRelation("history_entry", new System.Data.DataColumn[] {
                        this.tablehistory.history_IdColumn}, new System.Data.DataColumn[] {
                        this.tableentry.history_IdColumn}, false);
            this.relationhistory_entry.Nested = true;
            this.Relations.Add(this.relationhistory_entry);
            this._relationentry_rev_version = new System.Data.DataRelation("entry_rev-version", new System.Data.DataColumn[] {
                        this.tableentry.entry_IdColumn}, new System.Data.DataColumn[] {
                        this.table_rev_version.entry_IdColumn}, false);
            this._relationentry_rev_version.Nested = true;
            this.Relations.Add(this._relationentry_rev_version);
            this.relationentry_changelog = new System.Data.DataRelation("entry_changelog", new System.Data.DataColumn[] {
                        this.tableentry.entry_IdColumn}, new System.Data.DataColumn[] {
                        this.tablechangelog.entry_IdColumn}, false);
            this.relationentry_changelog.Nested = true;
            this.Relations.Add(this.relationentry_changelog);
            this.relationchangelog_change = new System.Data.DataRelation("changelog_change", new System.Data.DataColumn[] {
                        this.tablechangelog.changelog_IdColumn}, new System.Data.DataColumn[] {
                        this.tablechange.changelog_IdColumn}, false);
            this.relationchangelog_change.Nested = true;
            this.Relations.Add(this.relationchangelog_change);
            this.relationheader_meta = new System.Data.DataRelation("header_meta", new System.Data.DataColumn[] {
                        this.tableheader.header_IdColumn}, new System.Data.DataColumn[] {
                        this.tablemeta.header_IdColumn}, false);
            this.relationheader_meta.Nested = true;
            this.Relations.Add(this.relationheader_meta);
            this._relationaction_group_sql = new System.Data.DataRelation("action-group_sql", new System.Data.DataColumn[] {
                        this.table_action_group._action_group_IdColumn}, new System.Data.DataColumn[] {
                        this.tablesql._action_group_IdColumn}, false);
            this._relationaction_group_sql.Nested = true;
            this.Relations.Add(this._relationaction_group_sql);
            this._relationaction_group_copy = new System.Data.DataRelation("action-group_copy", new System.Data.DataColumn[] {
                        this.table_action_group._action_group_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecopy._action_group_IdColumn}, false);
            this._relationaction_group_copy.Nested = true;
            this.Relations.Add(this._relationaction_group_copy);
            this.relationcopy_file = new System.Data.DataRelation("copy_file", new System.Data.DataColumn[] {
                        this.tablecopy.copy_IdColumn}, new System.Data.DataColumn[] {
                        this.tablefile.copy_IdColumn}, false);
            this.relationcopy_file.Nested = true;
            this.Relations.Add(this.relationcopy_file);
            this._relationaction_group_open = new System.Data.DataRelation("action-group_open", new System.Data.DataColumn[] {
                        this.table_action_group._action_group_IdColumn}, new System.Data.DataColumn[] {
                        this.tableopen._action_group_IdColumn}, false);
            this._relationaction_group_open.Nested = true;
            this.Relations.Add(this._relationaction_group_open);
            this.relationopen_edit = new System.Data.DataRelation("open_edit", new System.Data.DataColumn[] {
                        this.tableopen.open_IdColumn}, new System.Data.DataColumn[] {
                        this.tableedit.open_IdColumn}, false);
            this.relationopen_edit.Nested = true;
            this.Relations.Add(this.relationopen_edit);
            this.relationedit_find = new System.Data.DataRelation("edit_find", new System.Data.DataColumn[] {
                        this.tableedit.edit_IdColumn}, new System.Data.DataColumn[] {
                        this.tablefind.edit_IdColumn}, false);
            this.relationedit_find.Nested = true;
            this.Relations.Add(this.relationedit_find);
            this.relationedit_action = new System.Data.DataRelation("edit_action", new System.Data.DataColumn[] {
                        this.tableedit.edit_IdColumn}, new System.Data.DataColumn[] {
                        this.tableaction.edit_IdColumn}, false);
            this.relationedit_action.Nested = true;
            this.Relations.Add(this.relationedit_action);
            this._relationedit_inline_edit = new System.Data.DataRelation("edit_inline-edit", new System.Data.DataColumn[] {
                        this.tableedit.edit_IdColumn}, new System.Data.DataColumn[] {
                        this.table_inline_edit.edit_IdColumn}, false);
            this._relationedit_inline_edit.Nested = true;
            this.Relations.Add(this._relationedit_inline_edit);
            this._relationinline_edit_inline_find = new System.Data.DataRelation("inline-edit_inline-find", new System.Data.DataColumn[] {
                        this.table_inline_edit._inline_edit_IdColumn}, new System.Data.DataColumn[] {
                        this.table_inline_find._inline_edit_IdColumn}, false);
            this._relationinline_edit_inline_find.Nested = true;
            this.Relations.Add(this._relationinline_edit_inline_find);
            this._relationinline_edit_inline_action = new System.Data.DataRelation("inline-edit_inline-action", new System.Data.DataColumn[] {
                        this.table_inline_edit._inline_edit_IdColumn}, new System.Data.DataColumn[] {
                        this.table_inline_action._inline_edit_IdColumn}, false);
            this._relationinline_edit_inline_action.Nested = true;
            this.Relations.Add(this._relationinline_edit_inline_action);
            this.relationedit_comment = new System.Data.DataRelation("edit_comment", new System.Data.DataColumn[] {
                        this.tableedit.edit_IdColumn}, new System.Data.DataColumn[] {
                        this.tablecomment.edit_IdColumn}, false);
            this.relationedit_comment.Nested = true;
            this.Relations.Add(this.relationedit_comment);
            this._relationaction_group_diy_instructions = new System.Data.DataRelation("action-group_diy-instructions", new System.Data.DataColumn[] {
                        this.table_action_group._action_group_IdColumn}, new System.Data.DataColumn[] {
                        this.table_diy_instructions._action_group_IdColumn}, false);
            this._relationaction_group_diy_instructions.Nested = true;
            this.Relations.Add(this._relationaction_group_diy_instructions);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeheader() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetitle() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedescription() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_author_notes() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_author_group() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeauthor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecontributions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_mod_version() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeinstallation() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_target_version() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_target_major() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_target_minor() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_target_revision() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_target_release() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializehistory() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeentry() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_rev_version() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializechangelog() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializechange() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemeta() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_action_group() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesql() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecopy() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefile() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeopen() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeedit() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializefind() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeaction() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_inline_edit() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_inline_find() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_inline_action() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializecomment() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerialize_diy_instructions() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            mod ds = new mod();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void headerRowChangeEventHandler(object sender, headerRowChangeEvent e);
        
        public delegate void titleRowChangeEventHandler(object sender, titleRowChangeEvent e);
        
        public delegate void descriptionRowChangeEventHandler(object sender, descriptionRowChangeEvent e);
        
        public delegate void _author_notesRowChangeEventHandler(object sender, _author_notesRowChangeEvent e);
        
        public delegate void _author_groupRowChangeEventHandler(object sender, _author_groupRowChangeEvent e);
        
        public delegate void authorRowChangeEventHandler(object sender, authorRowChangeEvent e);
        
        public delegate void contributionsRowChangeEventHandler(object sender, contributionsRowChangeEvent e);
        
        public delegate void _mod_versionRowChangeEventHandler(object sender, _mod_versionRowChangeEvent e);
        
        public delegate void installationRowChangeEventHandler(object sender, installationRowChangeEvent e);
        
        public delegate void _target_versionRowChangeEventHandler(object sender, _target_versionRowChangeEvent e);
        
        public delegate void _target_majorRowChangeEventHandler(object sender, _target_majorRowChangeEvent e);
        
        public delegate void _target_minorRowChangeEventHandler(object sender, _target_minorRowChangeEvent e);
        
        public delegate void _target_revisionRowChangeEventHandler(object sender, _target_revisionRowChangeEvent e);
        
        public delegate void _target_releaseRowChangeEventHandler(object sender, _target_releaseRowChangeEvent e);
        
        public delegate void historyRowChangeEventHandler(object sender, historyRowChangeEvent e);
        
        public delegate void entryRowChangeEventHandler(object sender, entryRowChangeEvent e);
        
        public delegate void _rev_versionRowChangeEventHandler(object sender, _rev_versionRowChangeEvent e);
        
        public delegate void changelogRowChangeEventHandler(object sender, changelogRowChangeEvent e);
        
        public delegate void changeRowChangeEventHandler(object sender, changeRowChangeEvent e);
        
        public delegate void metaRowChangeEventHandler(object sender, metaRowChangeEvent e);
        
        public delegate void _action_groupRowChangeEventHandler(object sender, _action_groupRowChangeEvent e);
        
        public delegate void sqlRowChangeEventHandler(object sender, sqlRowChangeEvent e);
        
        public delegate void copyRowChangeEventHandler(object sender, copyRowChangeEvent e);
        
        public delegate void fileRowChangeEventHandler(object sender, fileRowChangeEvent e);
        
        public delegate void openRowChangeEventHandler(object sender, openRowChangeEvent e);
        
        public delegate void editRowChangeEventHandler(object sender, editRowChangeEvent e);
        
        public delegate void findRowChangeEventHandler(object sender, findRowChangeEvent e);
        
        public delegate void actionRowChangeEventHandler(object sender, actionRowChangeEvent e);
        
        public delegate void _inline_editRowChangeEventHandler(object sender, _inline_editRowChangeEvent e);
        
        public delegate void _inline_findRowChangeEventHandler(object sender, _inline_findRowChangeEvent e);
        
        public delegate void _inline_actionRowChangeEventHandler(object sender, _inline_actionRowChangeEvent e);
        
        public delegate void commentRowChangeEventHandler(object sender, commentRowChangeEvent e);
        
        public delegate void _diy_instructionsRowChangeEventHandler(object sender, _diy_instructionsRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class headerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlicense;
            
            private System.Data.DataColumn columnheader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerDataTable() {
                this.TableName = "header";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal headerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected headerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn licenseColumn {
                get {
                    return this.columnlicense;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn header_IdColumn {
                get {
                    return this.columnheader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow this[int index] {
                get {
                    return ((headerRow)(this.Rows[index]));
                }
            }
            
            public event headerRowChangeEventHandler headerRowChanging;
            
            public event headerRowChangeEventHandler headerRowChanged;
            
            public event headerRowChangeEventHandler headerRowDeleting;
            
            public event headerRowChangeEventHandler headerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddheaderRow(headerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow AddheaderRow(string license) {
                headerRow rowheaderRow = ((headerRow)(this.NewRow()));
                rowheaderRow.ItemArray = new object[] {
                        license,
                        null};
                this.Rows.Add(rowheaderRow);
                return rowheaderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                headerDataTable cln = ((headerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new headerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlicense = base.Columns["license"];
                this.columnheader_Id = base.Columns["header_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlicense = new System.Data.DataColumn("license", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlicense);
                this.columnheader_Id = new System.Data.DataColumn("header_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnheader_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnheader_Id}, true));
                this.columnlicense.AllowDBNull = false;
                this.columnheader_Id.AutoIncrement = true;
                this.columnheader_Id.AllowDBNull = false;
                this.columnheader_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow NewheaderRow() {
                return ((headerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new headerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(headerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.headerRowChanged != null)) {
                    this.headerRowChanged(this, new headerRowChangeEvent(((headerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.headerRowChanging != null)) {
                    this.headerRowChanging(this, new headerRowChangeEvent(((headerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.headerRowDeleted != null)) {
                    this.headerRowDeleted(this, new headerRowChangeEvent(((headerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.headerRowDeleting != null)) {
                    this.headerRowDeleting(this, new headerRowChangeEvent(((headerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveheaderRow(headerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "headerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class titleDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlang;
            
            private System.Data.DataColumn columntitle_Text;
            
            private System.Data.DataColumn columnheader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleDataTable() {
                this.TableName = "title";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal titleDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected titleDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn title_TextColumn {
                get {
                    return this.columntitle_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn header_IdColumn {
                get {
                    return this.columnheader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow this[int index] {
                get {
                    return ((titleRow)(this.Rows[index]));
                }
            }
            
            public event titleRowChangeEventHandler titleRowChanging;
            
            public event titleRowChangeEventHandler titleRowChanged;
            
            public event titleRowChangeEventHandler titleRowDeleting;
            
            public event titleRowChangeEventHandler titleRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddtitleRow(titleRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow AddtitleRow(string lang, string title_Text, headerRow parentheaderRowByheader_title) {
                titleRow rowtitleRow = ((titleRow)(this.NewRow()));
                rowtitleRow.ItemArray = new object[] {
                        lang,
                        title_Text,
                        parentheaderRowByheader_title[1]};
                this.Rows.Add(rowtitleRow);
                return rowtitleRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                titleDataTable cln = ((titleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new titleDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columntitle_Text = base.Columns["title_Text"];
                this.columnheader_Id = base.Columns["header_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new System.Data.DataColumn("lang", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columntitle_Text = new System.Data.DataColumn("title_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columntitle_Text);
                this.columnheader_Id = new System.Data.DataColumn("header_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnheader_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("one-title-per-language", new System.Data.DataColumn[] {
                                this.columnlang}, false));
                this.columnlang.AllowDBNull = false;
                this.columnlang.Unique = true;
                this.columnlang.Namespace = "";
                this.columntitle_Text.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow NewtitleRow() {
                return ((titleRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new titleRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(titleRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.titleRowChanged != null)) {
                    this.titleRowChanged(this, new titleRowChangeEvent(((titleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.titleRowChanging != null)) {
                    this.titleRowChanging(this, new titleRowChangeEvent(((titleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.titleRowDeleted != null)) {
                    this.titleRowDeleted(this, new titleRowChangeEvent(((titleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.titleRowDeleting != null)) {
                    this.titleRowDeleting(this, new titleRowChangeEvent(((titleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovetitleRow(titleRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "titleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class descriptionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlang;
            
            private System.Data.DataColumn columndescription_Text;
            
            private System.Data.DataColumn columnheader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionDataTable() {
                this.TableName = "description";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal descriptionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected descriptionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn description_TextColumn {
                get {
                    return this.columndescription_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn header_IdColumn {
                get {
                    return this.columnheader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow this[int index] {
                get {
                    return ((descriptionRow)(this.Rows[index]));
                }
            }
            
            public event descriptionRowChangeEventHandler descriptionRowChanging;
            
            public event descriptionRowChangeEventHandler descriptionRowChanged;
            
            public event descriptionRowChangeEventHandler descriptionRowDeleting;
            
            public event descriptionRowChangeEventHandler descriptionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddescriptionRow(descriptionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow AdddescriptionRow(string lang, string description_Text, headerRow parentheaderRowByheader_description) {
                descriptionRow rowdescriptionRow = ((descriptionRow)(this.NewRow()));
                rowdescriptionRow.ItemArray = new object[] {
                        lang,
                        description_Text,
                        parentheaderRowByheader_description[1]};
                this.Rows.Add(rowdescriptionRow);
                return rowdescriptionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                descriptionDataTable cln = ((descriptionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new descriptionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columndescription_Text = base.Columns["description_Text"];
                this.columnheader_Id = base.Columns["header_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new System.Data.DataColumn("lang", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columndescription_Text = new System.Data.DataColumn("description_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columndescription_Text);
                this.columnheader_Id = new System.Data.DataColumn("header_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnheader_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("one-description-per-language", new System.Data.DataColumn[] {
                                this.columnlang}, false));
                this.columnlang.AllowDBNull = false;
                this.columnlang.Unique = true;
                this.columnlang.Namespace = "";
                this.columndescription_Text.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow NewdescriptionRow() {
                return ((descriptionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new descriptionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(descriptionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.descriptionRowChanged != null)) {
                    this.descriptionRowChanged(this, new descriptionRowChangeEvent(((descriptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.descriptionRowChanging != null)) {
                    this.descriptionRowChanging(this, new descriptionRowChangeEvent(((descriptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.descriptionRowDeleted != null)) {
                    this.descriptionRowDeleted(this, new descriptionRowChangeEvent(((descriptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.descriptionRowDeleting != null)) {
                    this.descriptionRowDeleting(this, new descriptionRowChangeEvent(((descriptionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedescriptionRow(descriptionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "descriptionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _author_notesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlang;
            
            private System.Data.DataColumn column_author_notes_Text;
            
            private System.Data.DataColumn columnheader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_notesDataTable() {
                this.TableName = "author-notes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _author_notesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _author_notesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _author_notes_TextColumn {
                get {
                    return this.column_author_notes_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn header_IdColumn {
                get {
                    return this.columnheader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_notesRow this[int index] {
                get {
                    return ((_author_notesRow)(this.Rows[index]));
                }
            }
            
            public event _author_notesRowChangeEventHandler _author_notesRowChanging;
            
            public event _author_notesRowChangeEventHandler _author_notesRowChanged;
            
            public event _author_notesRowChangeEventHandler _author_notesRowDeleting;
            
            public event _author_notesRowChangeEventHandler _author_notesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_author_notesRow(_author_notesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_notesRow Add_author_notesRow(string lang, string _author_notes_Text, headerRow _parentheaderRowByheader_author_notes) {
                _author_notesRow row_author_notesRow = ((_author_notesRow)(this.NewRow()));
                row_author_notesRow.ItemArray = new object[] {
                        lang,
                        _author_notes_Text,
                        _parentheaderRowByheader_author_notes[1]};
                this.Rows.Add(row_author_notesRow);
                return row_author_notesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _author_notesDataTable cln = ((_author_notesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _author_notesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.column_author_notes_Text = base.Columns["author-notes_Text"];
                this.columnheader_Id = base.Columns["header_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new System.Data.DataColumn("lang", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.column_author_notes_Text = new System.Data.DataColumn("author-notes_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.column_author_notes_Text.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_author_notes_Text");
                this.column_author_notes_Text.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_author_notes_TextColumn");
                this.column_author_notes_Text.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_author_notes_Text");
                this.column_author_notes_Text.ExtendedProperties.Add("Generator_UserColumnName", "author-notes_Text");
                base.Columns.Add(this.column_author_notes_Text);
                this.columnheader_Id = new System.Data.DataColumn("header_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnheader_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("one-author-notes-per-language", new System.Data.DataColumn[] {
                                this.columnlang}, false));
                this.columnlang.AllowDBNull = false;
                this.columnlang.Unique = true;
                this.columnlang.Namespace = "";
                this.column_author_notes_Text.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "_author_notesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_author_notesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_author_notesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_author_notesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_author_notes");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_author_notes");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_notesRow New_author_notesRow() {
                return ((_author_notesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _author_notesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_author_notesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._author_notesRowChanged != null)) {
                    this._author_notesRowChanged(this, new _author_notesRowChangeEvent(((_author_notesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._author_notesRowChanging != null)) {
                    this._author_notesRowChanging(this, new _author_notesRowChangeEvent(((_author_notesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._author_notesRowDeleted != null)) {
                    this._author_notesRowDeleted(this, new _author_notesRowChangeEvent(((_author_notesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._author_notesRowDeleting != null)) {
                    this._author_notesRowDeleting(this, new _author_notesRowChangeEvent(((_author_notesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_author_notesRow(_author_notesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_author_notesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _author_groupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column_author_group_Id;
            
            private System.Data.DataColumn columnheader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_groupDataTable() {
                this.TableName = "author-group";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _author_groupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _author_groupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _author_group_IdColumn {
                get {
                    return this.column_author_group_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn header_IdColumn {
                get {
                    return this.columnheader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_groupRow this[int index] {
                get {
                    return ((_author_groupRow)(this.Rows[index]));
                }
            }
            
            public event _author_groupRowChangeEventHandler _author_groupRowChanging;
            
            public event _author_groupRowChangeEventHandler _author_groupRowChanged;
            
            public event _author_groupRowChangeEventHandler _author_groupRowDeleting;
            
            public event _author_groupRowChangeEventHandler _author_groupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_author_groupRow(_author_groupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_groupRow Add_author_groupRow(headerRow _parentheaderRowByheader_author_group) {
                _author_groupRow row_author_groupRow = ((_author_groupRow)(this.NewRow()));
                row_author_groupRow.ItemArray = new object[] {
                        null,
                        _parentheaderRowByheader_author_group[1]};
                this.Rows.Add(row_author_groupRow);
                return row_author_groupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _author_groupDataTable cln = ((_author_groupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _author_groupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_author_group_Id = base.Columns["author-group_Id"];
                this.columnheader_Id = base.Columns["header_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_author_group_Id = new System.Data.DataColumn("author-group_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_author_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_author_group_Id");
                this.column_author_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_author_group_IdColumn");
                this.column_author_group_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_author_group_Id");
                this.column_author_group_Id.ExtendedProperties.Add("Generator_UserColumnName", "author-group_Id");
                base.Columns.Add(this.column_author_group_Id);
                this.columnheader_Id = new System.Data.DataColumn("header_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnheader_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.column_author_group_Id}, true));
                this.column_author_group_Id.AutoIncrement = true;
                this.column_author_group_Id.AllowDBNull = false;
                this.column_author_group_Id.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "_author_groupRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_author_groupRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_author_groupRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_author_groupDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_author_group");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_author_group");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_groupRow New_author_groupRow() {
                return ((_author_groupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _author_groupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_author_groupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._author_groupRowChanged != null)) {
                    this._author_groupRowChanged(this, new _author_groupRowChangeEvent(((_author_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._author_groupRowChanging != null)) {
                    this._author_groupRowChanging(this, new _author_groupRowChangeEvent(((_author_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._author_groupRowDeleted != null)) {
                    this._author_groupRowDeleted(this, new _author_groupRowChangeEvent(((_author_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._author_groupRowDeleting != null)) {
                    this._author_groupRowDeleting(this, new _author_groupRowChangeEvent(((_author_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_author_groupRow(_author_groupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_author_groupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class authorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrealname;
            
            private System.Data.DataColumn columnemail;
            
            private System.Data.DataColumn columnusername;
            
            private System.Data.DataColumn columnhomepage;
            
            private System.Data.DataColumn columnauthor_Id;
            
            private System.Data.DataColumn column_author_group_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public authorDataTable() {
                this.TableName = "author";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal authorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected authorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn realnameColumn {
                get {
                    return this.columnrealname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn usernameColumn {
                get {
                    return this.columnusername;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn homepageColumn {
                get {
                    return this.columnhomepage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn author_IdColumn {
                get {
                    return this.columnauthor_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _author_group_IdColumn {
                get {
                    return this.column_author_group_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public authorRow this[int index] {
                get {
                    return ((authorRow)(this.Rows[index]));
                }
            }
            
            public event authorRowChangeEventHandler authorRowChanging;
            
            public event authorRowChangeEventHandler authorRowChanged;
            
            public event authorRowChangeEventHandler authorRowDeleting;
            
            public event authorRowChangeEventHandler authorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddauthorRow(authorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public authorRow AddauthorRow(string realname, string email, string username, string homepage, _author_groupRow _parent_author_groupRowByauthor_group_author) {
                authorRow rowauthorRow = ((authorRow)(this.NewRow()));
                rowauthorRow.ItemArray = new object[] {
                        realname,
                        email,
                        username,
                        homepage,
                        null,
                        _parent_author_groupRowByauthor_group_author[0]};
                this.Rows.Add(rowauthorRow);
                return rowauthorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                authorDataTable cln = ((authorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new authorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrealname = base.Columns["realname"];
                this.columnemail = base.Columns["email"];
                this.columnusername = base.Columns["username"];
                this.columnhomepage = base.Columns["homepage"];
                this.columnauthor_Id = base.Columns["author_Id"];
                this.column_author_group_Id = base.Columns["author-group_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrealname = new System.Data.DataColumn("realname", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrealname);
                this.columnemail = new System.Data.DataColumn("email", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columnusername = new System.Data.DataColumn("username", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnusername);
                this.columnhomepage = new System.Data.DataColumn("homepage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnhomepage);
                this.columnauthor_Id = new System.Data.DataColumn("author_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnauthor_Id);
                this.column_author_group_Id = new System.Data.DataColumn("author-group_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_author_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_author_group_Id");
                this.column_author_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_author_group_IdColumn");
                this.column_author_group_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_author_group_Id");
                this.column_author_group_Id.ExtendedProperties.Add("Generator_UserColumnName", "author-group_Id");
                base.Columns.Add(this.column_author_group_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("one-author-per-username", new System.Data.DataColumn[] {
                                this.columnrealname}, false));
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnauthor_Id}, true));
                this.columnrealname.Unique = true;
                this.columnusername.AllowDBNull = false;
                this.columnauthor_Id.AutoIncrement = true;
                this.columnauthor_Id.AllowDBNull = false;
                this.columnauthor_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public authorRow NewauthorRow() {
                return ((authorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new authorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(authorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.authorRowChanged != null)) {
                    this.authorRowChanged(this, new authorRowChangeEvent(((authorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.authorRowChanging != null)) {
                    this.authorRowChanging(this, new authorRowChangeEvent(((authorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.authorRowDeleted != null)) {
                    this.authorRowDeleted(this, new authorRowChangeEvent(((authorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.authorRowDeleting != null)) {
                    this.authorRowDeleting(this, new authorRowChangeEvent(((authorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveauthorRow(authorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "authorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class contributionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnstatus;
            
            private System.Data.DataColumn columnfrom;
            
            private System.Data.DataColumn columnto;
            
            private System.Data.DataColumn columnauthor_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contributionsDataTable() {
                this.TableName = "contributions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contributionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected contributionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fromColumn {
                get {
                    return this.columnfrom;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn toColumn {
                get {
                    return this.columnto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn author_IdColumn {
                get {
                    return this.columnauthor_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contributionsRow this[int index] {
                get {
                    return ((contributionsRow)(this.Rows[index]));
                }
            }
            
            public event contributionsRowChangeEventHandler contributionsRowChanging;
            
            public event contributionsRowChangeEventHandler contributionsRowChanged;
            
            public event contributionsRowChangeEventHandler contributionsRowDeleting;
            
            public event contributionsRowChangeEventHandler contributionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcontributionsRow(contributionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contributionsRow AddcontributionsRow(string status, System.DateTime from, System.DateTime to, authorRow parentauthorRowByauthor_contributions) {
                contributionsRow rowcontributionsRow = ((contributionsRow)(this.NewRow()));
                rowcontributionsRow.ItemArray = new object[] {
                        status,
                        from,
                        to,
                        parentauthorRowByauthor_contributions[4]};
                this.Rows.Add(rowcontributionsRow);
                return rowcontributionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                contributionsDataTable cln = ((contributionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new contributionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstatus = base.Columns["status"];
                this.columnfrom = base.Columns["from"];
                this.columnto = base.Columns["to"];
                this.columnauthor_Id = base.Columns["author_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstatus = new System.Data.DataColumn("status", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstatus);
                this.columnfrom = new System.Data.DataColumn("from", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfrom);
                this.columnto = new System.Data.DataColumn("to", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnto);
                this.columnauthor_Id = new System.Data.DataColumn("author_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnauthor_Id);
                this.columnstatus.Namespace = "";
                this.columnfrom.Namespace = "";
                this.columnto.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contributionsRow NewcontributionsRow() {
                return ((contributionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new contributionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(contributionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.contributionsRowChanged != null)) {
                    this.contributionsRowChanged(this, new contributionsRowChangeEvent(((contributionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.contributionsRowChanging != null)) {
                    this.contributionsRowChanging(this, new contributionsRowChangeEvent(((contributionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.contributionsRowDeleted != null)) {
                    this.contributionsRowDeleted(this, new contributionsRowChangeEvent(((contributionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.contributionsRowDeleting != null)) {
                    this.contributionsRowDeleting(this, new contributionsRowChangeEvent(((contributionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecontributionsRow(contributionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "contributionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _mod_versionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnstage;
            
            private System.Data.DataColumn columnmajor;
            
            private System.Data.DataColumn columnminor;
            
            private System.Data.DataColumn columnrevision;
            
            private System.Data.DataColumn columnrelease;
            
            private System.Data.DataColumn columnheader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mod_versionDataTable() {
                this.TableName = "mod-version";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _mod_versionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _mod_versionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stageColumn {
                get {
                    return this.columnstage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn majorColumn {
                get {
                    return this.columnmajor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn minorColumn {
                get {
                    return this.columnminor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn revisionColumn {
                get {
                    return this.columnrevision;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn releaseColumn {
                get {
                    return this.columnrelease;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn header_IdColumn {
                get {
                    return this.columnheader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mod_versionRow this[int index] {
                get {
                    return ((_mod_versionRow)(this.Rows[index]));
                }
            }
            
            public event _mod_versionRowChangeEventHandler _mod_versionRowChanging;
            
            public event _mod_versionRowChangeEventHandler _mod_versionRowChanged;
            
            public event _mod_versionRowChangeEventHandler _mod_versionRowDeleting;
            
            public event _mod_versionRowChangeEventHandler _mod_versionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_mod_versionRow(_mod_versionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mod_versionRow Add_mod_versionRow(string stage, ushort major, ushort minor, ushort revision, string release, headerRow _parentheaderRowByheader_mod_version) {
                _mod_versionRow row_mod_versionRow = ((_mod_versionRow)(this.NewRow()));
                row_mod_versionRow.ItemArray = new object[] {
                        stage,
                        major,
                        minor,
                        revision,
                        release,
                        _parentheaderRowByheader_mod_version[1]};
                this.Rows.Add(row_mod_versionRow);
                return row_mod_versionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _mod_versionDataTable cln = ((_mod_versionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _mod_versionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstage = base.Columns["stage"];
                this.columnmajor = base.Columns["major"];
                this.columnminor = base.Columns["minor"];
                this.columnrevision = base.Columns["revision"];
                this.columnrelease = base.Columns["release"];
                this.columnheader_Id = base.Columns["header_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstage = new System.Data.DataColumn("stage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstage);
                this.columnmajor = new System.Data.DataColumn("major", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmajor);
                this.columnminor = new System.Data.DataColumn("minor", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnminor);
                this.columnrevision = new System.Data.DataColumn("revision", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrevision);
                this.columnrelease = new System.Data.DataColumn("release", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrelease);
                this.columnheader_Id = new System.Data.DataColumn("header_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnheader_Id);
                this.columnstage.Namespace = "";
                this.columnmajor.AllowDBNull = false;
                this.columnminor.AllowDBNull = false;
                this.columnrevision.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "_mod_versionRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_mod_versionRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_mod_versionRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_mod_versionDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_mod_version");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_mod_version");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mod_versionRow New_mod_versionRow() {
                return ((_mod_versionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _mod_versionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_mod_versionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._mod_versionRowChanged != null)) {
                    this._mod_versionRowChanged(this, new _mod_versionRowChangeEvent(((_mod_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._mod_versionRowChanging != null)) {
                    this._mod_versionRowChanging(this, new _mod_versionRowChangeEvent(((_mod_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._mod_versionRowDeleted != null)) {
                    this._mod_versionRowDeleted(this, new _mod_versionRowChangeEvent(((_mod_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._mod_versionRowDeleting != null)) {
                    this._mod_versionRowDeleting(this, new _mod_versionRowChangeEvent(((_mod_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_mod_versionRow(_mod_versionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_mod_versionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class installationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlevel;
            
            private System.Data.DataColumn columntime;
            
            private System.Data.DataColumn column_easymod_compliant;
            
            private System.Data.DataColumn column_mod_config;
            
            private System.Data.DataColumn columninstallation_Id;
            
            private System.Data.DataColumn columnheader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public installationDataTable() {
                this.TableName = "installation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal installationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected installationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn levelColumn {
                get {
                    return this.columnlevel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn timeColumn {
                get {
                    return this.columntime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _easymod_compliantColumn {
                get {
                    return this.column_easymod_compliant;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _mod_configColumn {
                get {
                    return this.column_mod_config;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn installation_IdColumn {
                get {
                    return this.columninstallation_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn header_IdColumn {
                get {
                    return this.columnheader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public installationRow this[int index] {
                get {
                    return ((installationRow)(this.Rows[index]));
                }
            }
            
            public event installationRowChangeEventHandler installationRowChanging;
            
            public event installationRowChangeEventHandler installationRowChanged;
            
            public event installationRowChangeEventHandler installationRowDeleting;
            
            public event installationRowChangeEventHandler installationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddinstallationRow(installationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public installationRow AddinstallationRow(string level, ulong time, bool _easymod_compliant, string _mod_config, headerRow parentheaderRowByheader_installation) {
                installationRow rowinstallationRow = ((installationRow)(this.NewRow()));
                rowinstallationRow.ItemArray = new object[] {
                        level,
                        time,
                        _easymod_compliant,
                        _mod_config,
                        null,
                        parentheaderRowByheader_installation[1]};
                this.Rows.Add(rowinstallationRow);
                return rowinstallationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                installationDataTable cln = ((installationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new installationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlevel = base.Columns["level"];
                this.columntime = base.Columns["time"];
                this.column_easymod_compliant = base.Columns["easymod-compliant"];
                this.column_mod_config = base.Columns["mod-config"];
                this.columninstallation_Id = base.Columns["installation_Id"];
                this.columnheader_Id = base.Columns["header_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlevel = new System.Data.DataColumn("level", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlevel);
                this.columntime = new System.Data.DataColumn("time", typeof(ulong), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntime);
                this.column_easymod_compliant = new System.Data.DataColumn("easymod-compliant", typeof(bool), null, System.Data.MappingType.Element);
                this.column_easymod_compliant.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_easymod_compliant");
                this.column_easymod_compliant.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_easymod_compliantColumn");
                this.column_easymod_compliant.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_easymod_compliant");
                this.column_easymod_compliant.ExtendedProperties.Add("Generator_UserColumnName", "easymod-compliant");
                base.Columns.Add(this.column_easymod_compliant);
                this.column_mod_config = new System.Data.DataColumn("mod-config", typeof(string), null, System.Data.MappingType.Element);
                this.column_mod_config.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_mod_config");
                this.column_mod_config.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_mod_configColumn");
                this.column_mod_config.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_mod_config");
                this.column_mod_config.ExtendedProperties.Add("Generator_UserColumnName", "mod-config");
                base.Columns.Add(this.column_mod_config);
                this.columninstallation_Id = new System.Data.DataColumn("installation_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstallation_Id);
                this.columnheader_Id = new System.Data.DataColumn("header_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnheader_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columninstallation_Id}, true));
                this.columnlevel.AllowDBNull = false;
                this.columntime.AllowDBNull = false;
                this.columninstallation_Id.AutoIncrement = true;
                this.columninstallation_Id.AllowDBNull = false;
                this.columninstallation_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public installationRow NewinstallationRow() {
                return ((installationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new installationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(installationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.installationRowChanged != null)) {
                    this.installationRowChanged(this, new installationRowChangeEvent(((installationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.installationRowChanging != null)) {
                    this.installationRowChanging(this, new installationRowChangeEvent(((installationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.installationRowDeleted != null)) {
                    this.installationRowDeleted(this, new installationRowChangeEvent(((installationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.installationRowDeleting != null)) {
                    this.installationRowDeleting(this, new installationRowChangeEvent(((installationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveinstallationRow(installationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "installationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _target_versionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column_target_primary;
            
            private System.Data.DataColumn column_target_version_Id;
            
            private System.Data.DataColumn columninstallation_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionDataTable() {
                this.TableName = "target-version";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_versionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _target_versionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_primaryColumn {
                get {
                    return this.column_target_primary;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_version_IdColumn {
                get {
                    return this.column_target_version_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn installation_IdColumn {
                get {
                    return this.columninstallation_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRow this[int index] {
                get {
                    return ((_target_versionRow)(this.Rows[index]));
                }
            }
            
            public event _target_versionRowChangeEventHandler _target_versionRowChanging;
            
            public event _target_versionRowChangeEventHandler _target_versionRowChanged;
            
            public event _target_versionRowChangeEventHandler _target_versionRowDeleting;
            
            public event _target_versionRowChangeEventHandler _target_versionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_target_versionRow(_target_versionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRow Add_target_versionRow(string _target_primary, installationRow _parentinstallationRowByinstallation_target_version) {
                _target_versionRow row_target_versionRow = ((_target_versionRow)(this.NewRow()));
                row_target_versionRow.ItemArray = new object[] {
                        _target_primary,
                        null,
                        _parentinstallationRowByinstallation_target_version[4]};
                this.Rows.Add(row_target_versionRow);
                return row_target_versionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _target_versionDataTable cln = ((_target_versionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _target_versionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_target_primary = base.Columns["target-primary"];
                this.column_target_version_Id = base.Columns["target-version_Id"];
                this.columninstallation_Id = base.Columns["installation_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_target_primary = new System.Data.DataColumn("target-primary", typeof(string), null, System.Data.MappingType.Element);
                this.column_target_primary.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_primary");
                this.column_target_primary.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_primaryColumn");
                this.column_target_primary.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_primary");
                this.column_target_primary.ExtendedProperties.Add("Generator_UserColumnName", "target-primary");
                base.Columns.Add(this.column_target_primary);
                this.column_target_version_Id = new System.Data.DataColumn("target-version_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_version_IdColumn");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_UserColumnName", "target-version_Id");
                base.Columns.Add(this.column_target_version_Id);
                this.columninstallation_Id = new System.Data.DataColumn("installation_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columninstallation_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.column_target_version_Id}, true));
                this.column_target_primary.AllowDBNull = false;
                this.column_target_version_Id.AutoIncrement = true;
                this.column_target_version_Id.AllowDBNull = false;
                this.column_target_version_Id.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "_target_versionRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_target_versionRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_target_versionRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_target_versionDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_target_version");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_target_version");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRow New_target_versionRow() {
                return ((_target_versionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _target_versionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_target_versionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._target_versionRowChanged != null)) {
                    this._target_versionRowChanged(this, new _target_versionRowChangeEvent(((_target_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._target_versionRowChanging != null)) {
                    this._target_versionRowChanging(this, new _target_versionRowChangeEvent(((_target_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._target_versionRowDeleted != null)) {
                    this._target_versionRowDeleted(this, new _target_versionRowChangeEvent(((_target_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._target_versionRowDeleting != null)) {
                    this._target_versionRowDeleting(this, new _target_versionRowChangeEvent(((_target_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_target_versionRow(_target_versionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_target_versionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _target_majorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnallow;
            
            private System.Data.DataColumn column_target_major_Text;
            
            private System.Data.DataColumn column_target_version_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_majorDataTable() {
                this.TableName = "target-major";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_majorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _target_majorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn allowColumn {
                get {
                    return this.columnallow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_major_TextColumn {
                get {
                    return this.column_target_major_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_version_IdColumn {
                get {
                    return this.column_target_version_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_majorRow this[int index] {
                get {
                    return ((_target_majorRow)(this.Rows[index]));
                }
            }
            
            public event _target_majorRowChangeEventHandler _target_majorRowChanging;
            
            public event _target_majorRowChangeEventHandler _target_majorRowChanged;
            
            public event _target_majorRowChangeEventHandler _target_majorRowDeleting;
            
            public event _target_majorRowChangeEventHandler _target_majorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_target_majorRow(_target_majorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_majorRow Add_target_majorRow(string allow, ushort _target_major_Text, _target_versionRow _parent_target_versionRowBytarget_version_target_major) {
                _target_majorRow row_target_majorRow = ((_target_majorRow)(this.NewRow()));
                row_target_majorRow.ItemArray = new object[] {
                        allow,
                        _target_major_Text,
                        _parent_target_versionRowBytarget_version_target_major[1]};
                this.Rows.Add(row_target_majorRow);
                return row_target_majorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _target_majorDataTable cln = ((_target_majorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _target_majorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnallow = base.Columns["allow"];
                this.column_target_major_Text = base.Columns["target-major_Text"];
                this.column_target_version_Id = base.Columns["target-version_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnallow = new System.Data.DataColumn("allow", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnallow);
                this.column_target_major_Text = new System.Data.DataColumn("target-major_Text", typeof(ushort), null, System.Data.MappingType.SimpleContent);
                this.column_target_major_Text.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_major_Text");
                this.column_target_major_Text.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_major_TextColumn");
                this.column_target_major_Text.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_major_Text");
                this.column_target_major_Text.ExtendedProperties.Add("Generator_UserColumnName", "target-major_Text");
                base.Columns.Add(this.column_target_major_Text);
                this.column_target_version_Id = new System.Data.DataColumn("target-version_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_version_IdColumn");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_UserColumnName", "target-version_Id");
                base.Columns.Add(this.column_target_version_Id);
                this.columnallow.Namespace = "";
                this.ExtendedProperties.Add("Generator_RowClassName", "_target_majorRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_target_majorRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_target_majorRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_target_majorDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_target_major");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_target_major");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_majorRow New_target_majorRow() {
                return ((_target_majorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _target_majorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_target_majorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._target_majorRowChanged != null)) {
                    this._target_majorRowChanged(this, new _target_majorRowChangeEvent(((_target_majorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._target_majorRowChanging != null)) {
                    this._target_majorRowChanging(this, new _target_majorRowChangeEvent(((_target_majorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._target_majorRowDeleted != null)) {
                    this._target_majorRowDeleted(this, new _target_majorRowChangeEvent(((_target_majorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._target_majorRowDeleting != null)) {
                    this._target_majorRowDeleting(this, new _target_majorRowChangeEvent(((_target_majorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_target_majorRow(_target_majorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_target_majorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _target_minorDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnallow;
            
            private System.Data.DataColumn column_target_minor_Text;
            
            private System.Data.DataColumn column_target_version_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_minorDataTable() {
                this.TableName = "target-minor";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_minorDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _target_minorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn allowColumn {
                get {
                    return this.columnallow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_minor_TextColumn {
                get {
                    return this.column_target_minor_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_version_IdColumn {
                get {
                    return this.column_target_version_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_minorRow this[int index] {
                get {
                    return ((_target_minorRow)(this.Rows[index]));
                }
            }
            
            public event _target_minorRowChangeEventHandler _target_minorRowChanging;
            
            public event _target_minorRowChangeEventHandler _target_minorRowChanged;
            
            public event _target_minorRowChangeEventHandler _target_minorRowDeleting;
            
            public event _target_minorRowChangeEventHandler _target_minorRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_target_minorRow(_target_minorRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_minorRow Add_target_minorRow(string allow, ushort _target_minor_Text, _target_versionRow _parent_target_versionRowBytarget_version_target_minor) {
                _target_minorRow row_target_minorRow = ((_target_minorRow)(this.NewRow()));
                row_target_minorRow.ItemArray = new object[] {
                        allow,
                        _target_minor_Text,
                        _parent_target_versionRowBytarget_version_target_minor[1]};
                this.Rows.Add(row_target_minorRow);
                return row_target_minorRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _target_minorDataTable cln = ((_target_minorDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _target_minorDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnallow = base.Columns["allow"];
                this.column_target_minor_Text = base.Columns["target-minor_Text"];
                this.column_target_version_Id = base.Columns["target-version_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnallow = new System.Data.DataColumn("allow", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnallow);
                this.column_target_minor_Text = new System.Data.DataColumn("target-minor_Text", typeof(ushort), null, System.Data.MappingType.SimpleContent);
                this.column_target_minor_Text.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_minor_Text");
                this.column_target_minor_Text.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_minor_TextColumn");
                this.column_target_minor_Text.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_minor_Text");
                this.column_target_minor_Text.ExtendedProperties.Add("Generator_UserColumnName", "target-minor_Text");
                base.Columns.Add(this.column_target_minor_Text);
                this.column_target_version_Id = new System.Data.DataColumn("target-version_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_version_IdColumn");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_UserColumnName", "target-version_Id");
                base.Columns.Add(this.column_target_version_Id);
                this.columnallow.AllowDBNull = false;
                this.columnallow.Namespace = "";
                this.ExtendedProperties.Add("Generator_RowClassName", "_target_minorRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_target_minorRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_target_minorRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_target_minorDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_target_minor");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_target_minor");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_minorRow New_target_minorRow() {
                return ((_target_minorRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _target_minorRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_target_minorRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._target_minorRowChanged != null)) {
                    this._target_minorRowChanged(this, new _target_minorRowChangeEvent(((_target_minorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._target_minorRowChanging != null)) {
                    this._target_minorRowChanging(this, new _target_minorRowChangeEvent(((_target_minorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._target_minorRowDeleted != null)) {
                    this._target_minorRowDeleted(this, new _target_minorRowChangeEvent(((_target_minorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._target_minorRowDeleting != null)) {
                    this._target_minorRowDeleting(this, new _target_minorRowChangeEvent(((_target_minorRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_target_minorRow(_target_minorRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_target_minorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _target_revisionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnallow;
            
            private System.Data.DataColumn column_target_revision_Text;
            
            private System.Data.DataColumn columnstage;
            
            private System.Data.DataColumn column_target_version_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_revisionDataTable() {
                this.TableName = "target-revision";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_revisionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _target_revisionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn allowColumn {
                get {
                    return this.columnallow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_revision_TextColumn {
                get {
                    return this.column_target_revision_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stageColumn {
                get {
                    return this.columnstage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_version_IdColumn {
                get {
                    return this.column_target_version_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_revisionRow this[int index] {
                get {
                    return ((_target_revisionRow)(this.Rows[index]));
                }
            }
            
            public event _target_revisionRowChangeEventHandler _target_revisionRowChanging;
            
            public event _target_revisionRowChangeEventHandler _target_revisionRowChanged;
            
            public event _target_revisionRowChangeEventHandler _target_revisionRowDeleting;
            
            public event _target_revisionRowChangeEventHandler _target_revisionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_target_revisionRow(_target_revisionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_revisionRow Add_target_revisionRow(string allow, ushort _target_revision_Text, string stage, _target_versionRow _parent_target_versionRowBytarget_version_target_revision) {
                _target_revisionRow row_target_revisionRow = ((_target_revisionRow)(this.NewRow()));
                row_target_revisionRow.ItemArray = new object[] {
                        allow,
                        _target_revision_Text,
                        stage,
                        _parent_target_versionRowBytarget_version_target_revision[1]};
                this.Rows.Add(row_target_revisionRow);
                return row_target_revisionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _target_revisionDataTable cln = ((_target_revisionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _target_revisionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnallow = base.Columns["allow"];
                this.column_target_revision_Text = base.Columns["target-revision_Text"];
                this.columnstage = base.Columns["stage"];
                this.column_target_version_Id = base.Columns["target-version_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnallow = new System.Data.DataColumn("allow", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnallow);
                this.column_target_revision_Text = new System.Data.DataColumn("target-revision_Text", typeof(ushort), null, System.Data.MappingType.SimpleContent);
                this.column_target_revision_Text.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_revision_Text");
                this.column_target_revision_Text.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_revision_TextColumn");
                this.column_target_revision_Text.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_revision_Text");
                this.column_target_revision_Text.ExtendedProperties.Add("Generator_UserColumnName", "target-revision_Text");
                base.Columns.Add(this.column_target_revision_Text);
                this.columnstage = new System.Data.DataColumn("stage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstage);
                this.column_target_version_Id = new System.Data.DataColumn("target-version_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_version_IdColumn");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_UserColumnName", "target-version_Id");
                base.Columns.Add(this.column_target_version_Id);
                this.columnallow.AllowDBNull = false;
                this.columnallow.Namespace = "";
                this.columnstage.Namespace = "";
                this.ExtendedProperties.Add("Generator_RowClassName", "_target_revisionRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_target_revisionRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_target_revisionRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_target_revisionDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_target_revision");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_target_revision");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_revisionRow New_target_revisionRow() {
                return ((_target_revisionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _target_revisionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_target_revisionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._target_revisionRowChanged != null)) {
                    this._target_revisionRowChanged(this, new _target_revisionRowChangeEvent(((_target_revisionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._target_revisionRowChanging != null)) {
                    this._target_revisionRowChanging(this, new _target_revisionRowChangeEvent(((_target_revisionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._target_revisionRowDeleted != null)) {
                    this._target_revisionRowDeleted(this, new _target_revisionRowChangeEvent(((_target_revisionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._target_revisionRowDeleting != null)) {
                    this._target_revisionRowDeleting(this, new _target_revisionRowChangeEvent(((_target_revisionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_target_revisionRow(_target_revisionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_target_revisionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _target_releaseDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnallow;
            
            private System.Data.DataColumn column_target_release_Text;
            
            private System.Data.DataColumn column_target_version_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_releaseDataTable() {
                this.TableName = "target-release";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_releaseDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _target_releaseDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn allowColumn {
                get {
                    return this.columnallow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_release_TextColumn {
                get {
                    return this.column_target_release_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _target_version_IdColumn {
                get {
                    return this.column_target_version_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_releaseRow this[int index] {
                get {
                    return ((_target_releaseRow)(this.Rows[index]));
                }
            }
            
            public event _target_releaseRowChangeEventHandler _target_releaseRowChanging;
            
            public event _target_releaseRowChangeEventHandler _target_releaseRowChanged;
            
            public event _target_releaseRowChangeEventHandler _target_releaseRowDeleting;
            
            public event _target_releaseRowChangeEventHandler _target_releaseRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_target_releaseRow(_target_releaseRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_releaseRow Add_target_releaseRow(string allow, string _target_release_Text, _target_versionRow _parent_target_versionRowBytarget_version_target_release) {
                _target_releaseRow row_target_releaseRow = ((_target_releaseRow)(this.NewRow()));
                row_target_releaseRow.ItemArray = new object[] {
                        allow,
                        _target_release_Text,
                        _parent_target_versionRowBytarget_version_target_release[1]};
                this.Rows.Add(row_target_releaseRow);
                return row_target_releaseRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _target_releaseDataTable cln = ((_target_releaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _target_releaseDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnallow = base.Columns["allow"];
                this.column_target_release_Text = base.Columns["target-release_Text"];
                this.column_target_version_Id = base.Columns["target-version_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnallow = new System.Data.DataColumn("allow", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnallow);
                this.column_target_release_Text = new System.Data.DataColumn("target-release_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.column_target_release_Text.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_release_Text");
                this.column_target_release_Text.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_release_TextColumn");
                this.column_target_release_Text.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_release_Text");
                this.column_target_release_Text.ExtendedProperties.Add("Generator_UserColumnName", "target-release_Text");
                base.Columns.Add(this.column_target_release_Text);
                this.column_target_version_Id = new System.Data.DataColumn("target-version_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_target_version_IdColumn");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_target_version_Id");
                this.column_target_version_Id.ExtendedProperties.Add("Generator_UserColumnName", "target-version_Id");
                base.Columns.Add(this.column_target_version_Id);
                this.columnallow.AllowDBNull = false;
                this.columnallow.Namespace = "";
                this.column_target_release_Text.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "_target_releaseRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_target_releaseRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_target_releaseRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_target_releaseDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_target_release");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_target_release");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_releaseRow New_target_releaseRow() {
                return ((_target_releaseRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _target_releaseRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_target_releaseRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._target_releaseRowChanged != null)) {
                    this._target_releaseRowChanged(this, new _target_releaseRowChangeEvent(((_target_releaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._target_releaseRowChanging != null)) {
                    this._target_releaseRowChanging(this, new _target_releaseRowChangeEvent(((_target_releaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._target_releaseRowDeleted != null)) {
                    this._target_releaseRowDeleted(this, new _target_releaseRowChangeEvent(((_target_releaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._target_releaseRowDeleting != null)) {
                    this._target_releaseRowDeleting(this, new _target_releaseRowChangeEvent(((_target_releaseRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_target_releaseRow(_target_releaseRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_target_releaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class historyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnhistory_Id;
            
            private System.Data.DataColumn columnheader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public historyDataTable() {
                this.TableName = "history";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal historyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected historyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn history_IdColumn {
                get {
                    return this.columnhistory_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn header_IdColumn {
                get {
                    return this.columnheader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public historyRow this[int index] {
                get {
                    return ((historyRow)(this.Rows[index]));
                }
            }
            
            public event historyRowChangeEventHandler historyRowChanging;
            
            public event historyRowChangeEventHandler historyRowChanged;
            
            public event historyRowChangeEventHandler historyRowDeleting;
            
            public event historyRowChangeEventHandler historyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddhistoryRow(historyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public historyRow AddhistoryRow(headerRow parentheaderRowByheader_history) {
                historyRow rowhistoryRow = ((historyRow)(this.NewRow()));
                rowhistoryRow.ItemArray = new object[] {
                        null,
                        parentheaderRowByheader_history[1]};
                this.Rows.Add(rowhistoryRow);
                return rowhistoryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                historyDataTable cln = ((historyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new historyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnhistory_Id = base.Columns["history_Id"];
                this.columnheader_Id = base.Columns["header_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnhistory_Id = new System.Data.DataColumn("history_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnhistory_Id);
                this.columnheader_Id = new System.Data.DataColumn("header_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnheader_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnhistory_Id}, true));
                this.columnhistory_Id.AutoIncrement = true;
                this.columnhistory_Id.AllowDBNull = false;
                this.columnhistory_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public historyRow NewhistoryRow() {
                return ((historyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new historyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(historyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.historyRowChanged != null)) {
                    this.historyRowChanged(this, new historyRowChangeEvent(((historyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.historyRowChanging != null)) {
                    this.historyRowChanging(this, new historyRowChangeEvent(((historyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.historyRowDeleted != null)) {
                    this.historyRowDeleted(this, new historyRowChangeEvent(((historyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.historyRowDeleting != null)) {
                    this.historyRowDeleting(this, new historyRowChangeEvent(((historyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovehistoryRow(historyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "historyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class entryDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndate;
            
            private System.Data.DataColumn columnentry_Id;
            
            private System.Data.DataColumn columnhistory_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryDataTable() {
                this.TableName = "entry";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entryDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected entryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dateColumn {
                get {
                    return this.columndate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn entry_IdColumn {
                get {
                    return this.columnentry_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn history_IdColumn {
                get {
                    return this.columnhistory_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow this[int index] {
                get {
                    return ((entryRow)(this.Rows[index]));
                }
            }
            
            public event entryRowChangeEventHandler entryRowChanging;
            
            public event entryRowChangeEventHandler entryRowChanged;
            
            public event entryRowChangeEventHandler entryRowDeleting;
            
            public event entryRowChangeEventHandler entryRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddentryRow(entryRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow AddentryRow(System.DateTime date, historyRow parenthistoryRowByhistory_entry) {
                entryRow rowentryRow = ((entryRow)(this.NewRow()));
                rowentryRow.ItemArray = new object[] {
                        date,
                        null,
                        parenthistoryRowByhistory_entry[0]};
                this.Rows.Add(rowentryRow);
                return rowentryRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                entryDataTable cln = ((entryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new entryDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate = base.Columns["date"];
                this.columnentry_Id = base.Columns["entry_Id"];
                this.columnhistory_Id = base.Columns["history_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate = new System.Data.DataColumn("date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate);
                this.columnentry_Id = new System.Data.DataColumn("entry_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnentry_Id);
                this.columnhistory_Id = new System.Data.DataColumn("history_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnhistory_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnentry_Id}, true));
                this.columndate.AllowDBNull = false;
                this.columnentry_Id.AutoIncrement = true;
                this.columnentry_Id.AllowDBNull = false;
                this.columnentry_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow NewentryRow() {
                return ((entryRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new entryRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(entryRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.entryRowChanged != null)) {
                    this.entryRowChanged(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.entryRowChanging != null)) {
                    this.entryRowChanging(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.entryRowDeleted != null)) {
                    this.entryRowDeleted(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.entryRowDeleting != null)) {
                    this.entryRowDeleting(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveentryRow(entryRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "entryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _rev_versionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnstage;
            
            private System.Data.DataColumn columnmajor;
            
            private System.Data.DataColumn columnminor;
            
            private System.Data.DataColumn columnrevision;
            
            private System.Data.DataColumn columnrelease;
            
            private System.Data.DataColumn columnentry_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _rev_versionDataTable() {
                this.TableName = "rev-version";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _rev_versionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _rev_versionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn stageColumn {
                get {
                    return this.columnstage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn majorColumn {
                get {
                    return this.columnmajor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn minorColumn {
                get {
                    return this.columnminor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn revisionColumn {
                get {
                    return this.columnrevision;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn releaseColumn {
                get {
                    return this.columnrelease;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn entry_IdColumn {
                get {
                    return this.columnentry_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _rev_versionRow this[int index] {
                get {
                    return ((_rev_versionRow)(this.Rows[index]));
                }
            }
            
            public event _rev_versionRowChangeEventHandler _rev_versionRowChanging;
            
            public event _rev_versionRowChangeEventHandler _rev_versionRowChanged;
            
            public event _rev_versionRowChangeEventHandler _rev_versionRowDeleting;
            
            public event _rev_versionRowChangeEventHandler _rev_versionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_rev_versionRow(_rev_versionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _rev_versionRow Add_rev_versionRow(string stage, ushort major, ushort minor, ushort revision, string release, entryRow _parententryRowByentry_rev_version) {
                _rev_versionRow row_rev_versionRow = ((_rev_versionRow)(this.NewRow()));
                row_rev_versionRow.ItemArray = new object[] {
                        stage,
                        major,
                        minor,
                        revision,
                        release,
                        _parententryRowByentry_rev_version[1]};
                this.Rows.Add(row_rev_versionRow);
                return row_rev_versionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _rev_versionDataTable cln = ((_rev_versionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _rev_versionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstage = base.Columns["stage"];
                this.columnmajor = base.Columns["major"];
                this.columnminor = base.Columns["minor"];
                this.columnrevision = base.Columns["revision"];
                this.columnrelease = base.Columns["release"];
                this.columnentry_Id = base.Columns["entry_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstage = new System.Data.DataColumn("stage", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnstage);
                this.columnmajor = new System.Data.DataColumn("major", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmajor);
                this.columnminor = new System.Data.DataColumn("minor", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnminor);
                this.columnrevision = new System.Data.DataColumn("revision", typeof(ushort), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrevision);
                this.columnrelease = new System.Data.DataColumn("release", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrelease);
                this.columnentry_Id = new System.Data.DataColumn("entry_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnentry_Id);
                this.columnstage.Namespace = "";
                this.columnmajor.AllowDBNull = false;
                this.columnminor.AllowDBNull = false;
                this.columnrevision.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "_rev_versionRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_rev_versionRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_rev_versionRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_rev_versionDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_rev_version");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_rev_version");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _rev_versionRow New_rev_versionRow() {
                return ((_rev_versionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _rev_versionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_rev_versionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._rev_versionRowChanged != null)) {
                    this._rev_versionRowChanged(this, new _rev_versionRowChangeEvent(((_rev_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._rev_versionRowChanging != null)) {
                    this._rev_versionRowChanging(this, new _rev_versionRowChangeEvent(((_rev_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._rev_versionRowDeleted != null)) {
                    this._rev_versionRowDeleted(this, new _rev_versionRowChangeEvent(((_rev_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._rev_versionRowDeleting != null)) {
                    this._rev_versionRowDeleting(this, new _rev_versionRowChangeEvent(((_rev_versionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_rev_versionRow(_rev_versionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_rev_versionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class changelogDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlang;
            
            private System.Data.DataColumn columnchangelog_Id;
            
            private System.Data.DataColumn columnentry_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changelogDataTable() {
                this.TableName = "changelog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal changelogDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected changelogDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn changelog_IdColumn {
                get {
                    return this.columnchangelog_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn entry_IdColumn {
                get {
                    return this.columnentry_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changelogRow this[int index] {
                get {
                    return ((changelogRow)(this.Rows[index]));
                }
            }
            
            public event changelogRowChangeEventHandler changelogRowChanging;
            
            public event changelogRowChangeEventHandler changelogRowChanged;
            
            public event changelogRowChangeEventHandler changelogRowDeleting;
            
            public event changelogRowChangeEventHandler changelogRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddchangelogRow(changelogRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changelogRow AddchangelogRow(string lang, entryRow parententryRowByentry_changelog) {
                changelogRow rowchangelogRow = ((changelogRow)(this.NewRow()));
                rowchangelogRow.ItemArray = new object[] {
                        lang,
                        null,
                        parententryRowByentry_changelog[1]};
                this.Rows.Add(rowchangelogRow);
                return rowchangelogRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                changelogDataTable cln = ((changelogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new changelogDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columnchangelog_Id = base.Columns["changelog_Id"];
                this.columnentry_Id = base.Columns["entry_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new System.Data.DataColumn("lang", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columnchangelog_Id = new System.Data.DataColumn("changelog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchangelog_Id);
                this.columnentry_Id = new System.Data.DataColumn("entry_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnentry_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnchangelog_Id}, true));
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
                this.columnchangelog_Id.AutoIncrement = true;
                this.columnchangelog_Id.AllowDBNull = false;
                this.columnchangelog_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changelogRow NewchangelogRow() {
                return ((changelogRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new changelogRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(changelogRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.changelogRowChanged != null)) {
                    this.changelogRowChanged(this, new changelogRowChangeEvent(((changelogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.changelogRowChanging != null)) {
                    this.changelogRowChanging(this, new changelogRowChangeEvent(((changelogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.changelogRowDeleted != null)) {
                    this.changelogRowDeleted(this, new changelogRowChangeEvent(((changelogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.changelogRowDeleting != null)) {
                    this.changelogRowDeleting(this, new changelogRowChangeEvent(((changelogRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovechangelogRow(changelogRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "changelogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class changeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnchange_Text;
            
            private System.Data.DataColumn columnchangelog_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changeDataTable() {
                this.TableName = "change";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal changeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected changeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn change_TextColumn {
                get {
                    return this.columnchange_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn changelog_IdColumn {
                get {
                    return this.columnchangelog_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changeRow this[int index] {
                get {
                    return ((changeRow)(this.Rows[index]));
                }
            }
            
            public event changeRowChangeEventHandler changeRowChanging;
            
            public event changeRowChangeEventHandler changeRowChanged;
            
            public event changeRowChangeEventHandler changeRowDeleting;
            
            public event changeRowChangeEventHandler changeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddchangeRow(changeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changeRow AddchangeRow(string change_Text, changelogRow parentchangelogRowBychangelog_change) {
                changeRow rowchangeRow = ((changeRow)(this.NewRow()));
                rowchangeRow.ItemArray = new object[] {
                        change_Text,
                        parentchangelogRowBychangelog_change[1]};
                this.Rows.Add(rowchangeRow);
                return rowchangeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                changeDataTable cln = ((changeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new changeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnchange_Text = base.Columns["change_Text"];
                this.columnchangelog_Id = base.Columns["changelog_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnchange_Text = new System.Data.DataColumn("change_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnchange_Text);
                this.columnchangelog_Id = new System.Data.DataColumn("changelog_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnchangelog_Id);
                this.columnchange_Text.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changeRow NewchangeRow() {
                return ((changeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new changeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(changeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.changeRowChanged != null)) {
                    this.changeRowChanged(this, new changeRowChangeEvent(((changeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.changeRowChanging != null)) {
                    this.changeRowChanging(this, new changeRowChangeEvent(((changeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.changeRowDeleted != null)) {
                    this.changeRowDeleted(this, new changeRowChangeEvent(((changeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.changeRowDeleting != null)) {
                    this.changeRowDeleting(this, new changeRowChangeEvent(((changeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovechangeRow(changeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "changeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class metaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columncontent;
            
            private System.Data.DataColumn columnheader_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metaDataTable() {
                this.TableName = "meta";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal metaDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected metaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn header_IdColumn {
                get {
                    return this.columnheader_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metaRow this[int index] {
                get {
                    return ((metaRow)(this.Rows[index]));
                }
            }
            
            public event metaRowChangeEventHandler metaRowChanging;
            
            public event metaRowChangeEventHandler metaRowChanged;
            
            public event metaRowChangeEventHandler metaRowDeleting;
            
            public event metaRowChangeEventHandler metaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddmetaRow(metaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metaRow AddmetaRow(string name, string content, headerRow parentheaderRowByheader_meta) {
                metaRow rowmetaRow = ((metaRow)(this.NewRow()));
                rowmetaRow.ItemArray = new object[] {
                        name,
                        content,
                        parentheaderRowByheader_meta[1]};
                this.Rows.Add(rowmetaRow);
                return rowmetaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                metaDataTable cln = ((metaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new metaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columncontent = base.Columns["content"];
                this.columnheader_Id = base.Columns["header_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnname);
                this.columncontent = new System.Data.DataColumn("content", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columncontent);
                this.columnheader_Id = new System.Data.DataColumn("header_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnheader_Id);
                this.columnname.Namespace = "";
                this.columncontent.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metaRow NewmetaRow() {
                return ((metaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new metaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(metaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.metaRowChanged != null)) {
                    this.metaRowChanged(this, new metaRowChangeEvent(((metaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.metaRowChanging != null)) {
                    this.metaRowChanging(this, new metaRowChangeEvent(((metaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.metaRowDeleted != null)) {
                    this.metaRowDeleted(this, new metaRowChangeEvent(((metaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.metaRowDeleting != null)) {
                    this.metaRowDeleting(this, new metaRowChangeEvent(((metaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovemetaRow(metaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "metaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _action_groupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column_action_group_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupDataTable() {
                this.TableName = "action-group";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _action_groupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _action_groupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _action_group_IdColumn {
                get {
                    return this.column_action_group_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupRow this[int index] {
                get {
                    return ((_action_groupRow)(this.Rows[index]));
                }
            }
            
            public event _action_groupRowChangeEventHandler _action_groupRowChanging;
            
            public event _action_groupRowChangeEventHandler _action_groupRowChanged;
            
            public event _action_groupRowChangeEventHandler _action_groupRowDeleting;
            
            public event _action_groupRowChangeEventHandler _action_groupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_action_groupRow(_action_groupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupRow Add_action_groupRow() {
                _action_groupRow row_action_groupRow = ((_action_groupRow)(this.NewRow()));
                row_action_groupRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(row_action_groupRow);
                return row_action_groupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _action_groupDataTable cln = ((_action_groupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _action_groupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_action_group_Id = base.Columns["action-group_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_action_group_Id = new System.Data.DataColumn("action-group_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_action_group_IdColumn");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_UserColumnName", "action-group_Id");
                base.Columns.Add(this.column_action_group_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.column_action_group_Id}, true));
                this.column_action_group_Id.AutoIncrement = true;
                this.column_action_group_Id.AllowDBNull = false;
                this.column_action_group_Id.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "_action_groupRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_action_groupRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_action_groupRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_action_groupDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_action_group");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_action_group");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupRow New_action_groupRow() {
                return ((_action_groupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _action_groupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_action_groupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._action_groupRowChanged != null)) {
                    this._action_groupRowChanged(this, new _action_groupRowChangeEvent(((_action_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._action_groupRowChanging != null)) {
                    this._action_groupRowChanging(this, new _action_groupRowChangeEvent(((_action_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._action_groupRowDeleted != null)) {
                    this._action_groupRowDeleted(this, new _action_groupRowChangeEvent(((_action_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._action_groupRowDeleting != null)) {
                    this._action_groupRowDeleting(this, new _action_groupRowChangeEvent(((_action_groupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_action_groupRow(_action_groupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_action_groupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sqlDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndbms;
            
            private System.Data.DataColumn columnsql_Text;
            
            private System.Data.DataColumn column_action_group_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sqlDataTable() {
                this.TableName = "sql";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sqlDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sqlDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn dbmsColumn {
                get {
                    return this.columndbms;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sql_TextColumn {
                get {
                    return this.columnsql_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _action_group_IdColumn {
                get {
                    return this.column_action_group_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sqlRow this[int index] {
                get {
                    return ((sqlRow)(this.Rows[index]));
                }
            }
            
            public event sqlRowChangeEventHandler sqlRowChanging;
            
            public event sqlRowChangeEventHandler sqlRowChanged;
            
            public event sqlRowChangeEventHandler sqlRowDeleting;
            
            public event sqlRowChangeEventHandler sqlRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsqlRow(sqlRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sqlRow AddsqlRow(string dbms, string sql_Text, _action_groupRow _parent_action_groupRowByaction_group_sql) {
                sqlRow rowsqlRow = ((sqlRow)(this.NewRow()));
                rowsqlRow.ItemArray = new object[] {
                        dbms,
                        sql_Text,
                        _parent_action_groupRowByaction_group_sql[0]};
                this.Rows.Add(rowsqlRow);
                return rowsqlRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                sqlDataTable cln = ((sqlDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new sqlDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndbms = base.Columns["dbms"];
                this.columnsql_Text = base.Columns["sql_Text"];
                this.column_action_group_Id = base.Columns["action-group_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndbms = new System.Data.DataColumn("dbms", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columndbms);
                this.columnsql_Text = new System.Data.DataColumn("sql_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnsql_Text);
                this.column_action_group_Id = new System.Data.DataColumn("action-group_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_action_group_IdColumn");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_UserColumnName", "action-group_Id");
                base.Columns.Add(this.column_action_group_Id);
                this.columndbms.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sqlRow NewsqlRow() {
                return ((sqlRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new sqlRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(sqlRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sqlRowChanged != null)) {
                    this.sqlRowChanged(this, new sqlRowChangeEvent(((sqlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sqlRowChanging != null)) {
                    this.sqlRowChanging(this, new sqlRowChangeEvent(((sqlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sqlRowDeleted != null)) {
                    this.sqlRowDeleted(this, new sqlRowChangeEvent(((sqlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sqlRowDeleting != null)) {
                    this.sqlRowDeleting(this, new sqlRowChangeEvent(((sqlRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesqlRow(sqlRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sqlDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class copyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columncopy_Id;
            
            private System.Data.DataColumn column_action_group_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public copyDataTable() {
                this.TableName = "copy";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal copyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected copyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn copy_IdColumn {
                get {
                    return this.columncopy_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _action_group_IdColumn {
                get {
                    return this.column_action_group_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public copyRow this[int index] {
                get {
                    return ((copyRow)(this.Rows[index]));
                }
            }
            
            public event copyRowChangeEventHandler copyRowChanging;
            
            public event copyRowChangeEventHandler copyRowChanged;
            
            public event copyRowChangeEventHandler copyRowDeleting;
            
            public event copyRowChangeEventHandler copyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcopyRow(copyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public copyRow AddcopyRow(_action_groupRow _parent_action_groupRowByaction_group_copy) {
                copyRow rowcopyRow = ((copyRow)(this.NewRow()));
                rowcopyRow.ItemArray = new object[] {
                        null,
                        _parent_action_groupRowByaction_group_copy[0]};
                this.Rows.Add(rowcopyRow);
                return rowcopyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                copyDataTable cln = ((copyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new copyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncopy_Id = base.Columns["copy_Id"];
                this.column_action_group_Id = base.Columns["action-group_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncopy_Id = new System.Data.DataColumn("copy_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncopy_Id);
                this.column_action_group_Id = new System.Data.DataColumn("action-group_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_action_group_IdColumn");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_UserColumnName", "action-group_Id");
                base.Columns.Add(this.column_action_group_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columncopy_Id}, true));
                this.columncopy_Id.AutoIncrement = true;
                this.columncopy_Id.AllowDBNull = false;
                this.columncopy_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public copyRow NewcopyRow() {
                return ((copyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new copyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(copyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.copyRowChanged != null)) {
                    this.copyRowChanged(this, new copyRowChangeEvent(((copyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.copyRowChanging != null)) {
                    this.copyRowChanging(this, new copyRowChangeEvent(((copyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.copyRowDeleted != null)) {
                    this.copyRowDeleted(this, new copyRowChangeEvent(((copyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.copyRowDeleting != null)) {
                    this.copyRowDeleting(this, new copyRowChangeEvent(((copyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecopyRow(copyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "copyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class fileDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnfrom;
            
            private System.Data.DataColumn columnto;
            
            private System.Data.DataColumn columncopy_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileDataTable() {
                this.TableName = "file";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal fileDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected fileDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn fromColumn {
                get {
                    return this.columnfrom;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn toColumn {
                get {
                    return this.columnto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn copy_IdColumn {
                get {
                    return this.columncopy_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow this[int index] {
                get {
                    return ((fileRow)(this.Rows[index]));
                }
            }
            
            public event fileRowChangeEventHandler fileRowChanging;
            
            public event fileRowChangeEventHandler fileRowChanged;
            
            public event fileRowChangeEventHandler fileRowDeleting;
            
            public event fileRowChangeEventHandler fileRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfileRow(fileRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow AddfileRow(string from, string to, copyRow parentcopyRowBycopy_file) {
                fileRow rowfileRow = ((fileRow)(this.NewRow()));
                rowfileRow.ItemArray = new object[] {
                        from,
                        to,
                        parentcopyRowBycopy_file[0]};
                this.Rows.Add(rowfileRow);
                return rowfileRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                fileDataTable cln = ((fileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new fileDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfrom = base.Columns["from"];
                this.columnto = base.Columns["to"];
                this.columncopy_Id = base.Columns["copy_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfrom = new System.Data.DataColumn("from", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnfrom);
                this.columnto = new System.Data.DataColumn("to", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnto);
                this.columncopy_Id = new System.Data.DataColumn("copy_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columncopy_Id);
                this.columnfrom.AllowDBNull = false;
                this.columnfrom.Namespace = "";
                this.columnto.AllowDBNull = false;
                this.columnto.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow NewfileRow() {
                return ((fileRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new fileRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(fileRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fileRowChanged != null)) {
                    this.fileRowChanged(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fileRowChanging != null)) {
                    this.fileRowChanging(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fileRowDeleted != null)) {
                    this.fileRowDeleted(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fileRowDeleting != null)) {
                    this.fileRowDeleting(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefileRow(fileRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "fileDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class openDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnsrc;
            
            private System.Data.DataColumn columnopen_Id;
            
            private System.Data.DataColumn column_action_group_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public openDataTable() {
                this.TableName = "open";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal openDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected openDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn srcColumn {
                get {
                    return this.columnsrc;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn open_IdColumn {
                get {
                    return this.columnopen_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _action_group_IdColumn {
                get {
                    return this.column_action_group_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public openRow this[int index] {
                get {
                    return ((openRow)(this.Rows[index]));
                }
            }
            
            public event openRowChangeEventHandler openRowChanging;
            
            public event openRowChangeEventHandler openRowChanged;
            
            public event openRowChangeEventHandler openRowDeleting;
            
            public event openRowChangeEventHandler openRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddopenRow(openRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public openRow AddopenRow(string src, _action_groupRow _parent_action_groupRowByaction_group_open) {
                openRow rowopenRow = ((openRow)(this.NewRow()));
                rowopenRow.ItemArray = new object[] {
                        src,
                        null,
                        _parent_action_groupRowByaction_group_open[0]};
                this.Rows.Add(rowopenRow);
                return rowopenRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                openDataTable cln = ((openDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new openDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsrc = base.Columns["src"];
                this.columnopen_Id = base.Columns["open_Id"];
                this.column_action_group_Id = base.Columns["action-group_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsrc = new System.Data.DataColumn("src", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnsrc);
                this.columnopen_Id = new System.Data.DataColumn("open_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnopen_Id);
                this.column_action_group_Id = new System.Data.DataColumn("action-group_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_action_group_IdColumn");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_UserColumnName", "action-group_Id");
                base.Columns.Add(this.column_action_group_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnopen_Id}, true));
                this.columnsrc.AllowDBNull = false;
                this.columnsrc.Namespace = "";
                this.columnopen_Id.AutoIncrement = true;
                this.columnopen_Id.AllowDBNull = false;
                this.columnopen_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public openRow NewopenRow() {
                return ((openRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new openRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(openRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.openRowChanged != null)) {
                    this.openRowChanged(this, new openRowChangeEvent(((openRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.openRowChanging != null)) {
                    this.openRowChanging(this, new openRowChangeEvent(((openRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.openRowDeleted != null)) {
                    this.openRowDeleted(this, new openRowChangeEvent(((openRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.openRowDeleting != null)) {
                    this.openRowDeleting(this, new openRowChangeEvent(((openRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveopenRow(openRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "openDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class editDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnedit_Id;
            
            private System.Data.DataColumn columnopen_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editDataTable() {
                this.TableName = "edit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal editDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected editDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn edit_IdColumn {
                get {
                    return this.columnedit_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn open_IdColumn {
                get {
                    return this.columnopen_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow this[int index] {
                get {
                    return ((editRow)(this.Rows[index]));
                }
            }
            
            public event editRowChangeEventHandler editRowChanging;
            
            public event editRowChangeEventHandler editRowChanged;
            
            public event editRowChangeEventHandler editRowDeleting;
            
            public event editRowChangeEventHandler editRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddeditRow(editRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow AddeditRow(openRow parentopenRowByopen_edit) {
                editRow roweditRow = ((editRow)(this.NewRow()));
                roweditRow.ItemArray = new object[] {
                        null,
                        parentopenRowByopen_edit[1]};
                this.Rows.Add(roweditRow);
                return roweditRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                editDataTable cln = ((editDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new editDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnedit_Id = base.Columns["edit_Id"];
                this.columnopen_Id = base.Columns["open_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnedit_Id = new System.Data.DataColumn("edit_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnedit_Id);
                this.columnopen_Id = new System.Data.DataColumn("open_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnopen_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnedit_Id}, true));
                this.columnedit_Id.AutoIncrement = true;
                this.columnedit_Id.AllowDBNull = false;
                this.columnedit_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow NeweditRow() {
                return ((editRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new editRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(editRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.editRowChanged != null)) {
                    this.editRowChanged(this, new editRowChangeEvent(((editRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.editRowChanging != null)) {
                    this.editRowChanging(this, new editRowChangeEvent(((editRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.editRowDeleted != null)) {
                    this.editRowDeleted(this, new editRowChangeEvent(((editRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.editRowDeleting != null)) {
                    this.editRowDeleting(this, new editRowChangeEvent(((editRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveeditRow(editRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "editDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class findDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnfind_Text;
            
            private System.Data.DataColumn columntype;
            
            private System.Data.DataColumn columnedit_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public findDataTable() {
                this.TableName = "find";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal findDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected findDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn find_TextColumn {
                get {
                    return this.columnfind_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn edit_IdColumn {
                get {
                    return this.columnedit_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public findRow this[int index] {
                get {
                    return ((findRow)(this.Rows[index]));
                }
            }
            
            public event findRowChangeEventHandler findRowChanging;
            
            public event findRowChangeEventHandler findRowChanged;
            
            public event findRowChangeEventHandler findRowDeleting;
            
            public event findRowChangeEventHandler findRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddfindRow(findRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public findRow AddfindRow(string find_Text, string type, editRow parenteditRowByedit_find) {
                findRow rowfindRow = ((findRow)(this.NewRow()));
                rowfindRow.ItemArray = new object[] {
                        find_Text,
                        type,
                        parenteditRowByedit_find[0]};
                this.Rows.Add(rowfindRow);
                return rowfindRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                findDataTable cln = ((findDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new findDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnfind_Text = base.Columns["find_Text"];
                this.columntype = base.Columns["type"];
                this.columnedit_Id = base.Columns["edit_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnfind_Text = new System.Data.DataColumn("find_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnfind_Text);
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnedit_Id = new System.Data.DataColumn("edit_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnedit_Id);
                this.columntype.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public findRow NewfindRow() {
                return ((findRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new findRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(findRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.findRowChanged != null)) {
                    this.findRowChanged(this, new findRowChangeEvent(((findRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.findRowChanging != null)) {
                    this.findRowChanging(this, new findRowChangeEvent(((findRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.findRowDeleted != null)) {
                    this.findRowDeleted(this, new findRowChangeEvent(((findRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.findRowDeleting != null)) {
                    this.findRowDeleting(this, new findRowChangeEvent(((findRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovefindRow(findRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "findDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class actionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntype;
            
            private System.Data.DataColumn columnaction_Text;
            
            private System.Data.DataColumn columnedit_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionDataTable() {
                this.TableName = "action";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal actionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected actionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn action_TextColumn {
                get {
                    return this.columnaction_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn edit_IdColumn {
                get {
                    return this.columnedit_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow this[int index] {
                get {
                    return ((actionRow)(this.Rows[index]));
                }
            }
            
            public event actionRowChangeEventHandler actionRowChanging;
            
            public event actionRowChangeEventHandler actionRowChanged;
            
            public event actionRowChangeEventHandler actionRowDeleting;
            
            public event actionRowChangeEventHandler actionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddactionRow(actionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow AddactionRow(string type, string action_Text, editRow parenteditRowByedit_action) {
                actionRow rowactionRow = ((actionRow)(this.NewRow()));
                rowactionRow.ItemArray = new object[] {
                        type,
                        action_Text,
                        parenteditRowByedit_action[0]};
                this.Rows.Add(rowactionRow);
                return rowactionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                actionDataTable cln = ((actionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new actionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype = base.Columns["type"];
                this.columnaction_Text = base.Columns["action_Text"];
                this.columnedit_Id = base.Columns["edit_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.columnaction_Text = new System.Data.DataColumn("action_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnaction_Text);
                this.columnedit_Id = new System.Data.DataColumn("edit_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnedit_Id);
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow NewactionRow() {
                return ((actionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new actionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(actionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.actionRowChanged != null)) {
                    this.actionRowChanged(this, new actionRowChangeEvent(((actionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.actionRowChanging != null)) {
                    this.actionRowChanging(this, new actionRowChangeEvent(((actionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.actionRowDeleted != null)) {
                    this.actionRowDeleted(this, new actionRowChangeEvent(((actionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.actionRowDeleting != null)) {
                    this.actionRowDeleting(this, new actionRowChangeEvent(((actionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveactionRow(actionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "actionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _inline_editDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column_inline_edit_Id;
            
            private System.Data.DataColumn columnedit_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_editDataTable() {
                this.TableName = "inline-edit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _inline_editDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _inline_editDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _inline_edit_IdColumn {
                get {
                    return this.column_inline_edit_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn edit_IdColumn {
                get {
                    return this.columnedit_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_editRow this[int index] {
                get {
                    return ((_inline_editRow)(this.Rows[index]));
                }
            }
            
            public event _inline_editRowChangeEventHandler _inline_editRowChanging;
            
            public event _inline_editRowChangeEventHandler _inline_editRowChanged;
            
            public event _inline_editRowChangeEventHandler _inline_editRowDeleting;
            
            public event _inline_editRowChangeEventHandler _inline_editRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_inline_editRow(_inline_editRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_editRow Add_inline_editRow(editRow _parenteditRowByedit_inline_edit) {
                _inline_editRow row_inline_editRow = ((_inline_editRow)(this.NewRow()));
                row_inline_editRow.ItemArray = new object[] {
                        null,
                        _parenteditRowByedit_inline_edit[0]};
                this.Rows.Add(row_inline_editRow);
                return row_inline_editRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _inline_editDataTable cln = ((_inline_editDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _inline_editDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_inline_edit_Id = base.Columns["inline-edit_Id"];
                this.columnedit_Id = base.Columns["edit_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_inline_edit_Id = new System.Data.DataColumn("inline-edit_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_inline_edit_Id");
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_inline_edit_IdColumn");
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_inline_edit_Id");
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_UserColumnName", "inline-edit_Id");
                base.Columns.Add(this.column_inline_edit_Id);
                this.columnedit_Id = new System.Data.DataColumn("edit_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnedit_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.column_inline_edit_Id}, true));
                this.column_inline_edit_Id.AutoIncrement = true;
                this.column_inline_edit_Id.AllowDBNull = false;
                this.column_inline_edit_Id.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "_inline_editRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_inline_editRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_inline_editRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_inline_editDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_inline_edit");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_inline_edit");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_editRow New_inline_editRow() {
                return ((_inline_editRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _inline_editRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_inline_editRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._inline_editRowChanged != null)) {
                    this._inline_editRowChanged(this, new _inline_editRowChangeEvent(((_inline_editRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._inline_editRowChanging != null)) {
                    this._inline_editRowChanging(this, new _inline_editRowChangeEvent(((_inline_editRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._inline_editRowDeleted != null)) {
                    this._inline_editRowDeleted(this, new _inline_editRowChangeEvent(((_inline_editRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._inline_editRowDeleting != null)) {
                    this._inline_editRowDeleting(this, new _inline_editRowChangeEvent(((_inline_editRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_inline_editRow(_inline_editRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_inline_editDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _inline_findDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column_inline_find_Text;
            
            private System.Data.DataColumn columntype;
            
            private System.Data.DataColumn column_inline_edit_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_findDataTable() {
                this.TableName = "inline-find";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _inline_findDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _inline_findDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _inline_find_TextColumn {
                get {
                    return this.column_inline_find_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _inline_edit_IdColumn {
                get {
                    return this.column_inline_edit_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_findRow this[int index] {
                get {
                    return ((_inline_findRow)(this.Rows[index]));
                }
            }
            
            public event _inline_findRowChangeEventHandler _inline_findRowChanging;
            
            public event _inline_findRowChangeEventHandler _inline_findRowChanged;
            
            public event _inline_findRowChangeEventHandler _inline_findRowDeleting;
            
            public event _inline_findRowChangeEventHandler _inline_findRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_inline_findRow(_inline_findRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_findRow Add_inline_findRow(string _inline_find_Text, string type, _inline_editRow _parent_inline_editRowByinline_edit_inline_find) {
                _inline_findRow row_inline_findRow = ((_inline_findRow)(this.NewRow()));
                row_inline_findRow.ItemArray = new object[] {
                        _inline_find_Text,
                        type,
                        _parent_inline_editRowByinline_edit_inline_find[0]};
                this.Rows.Add(row_inline_findRow);
                return row_inline_findRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _inline_findDataTable cln = ((_inline_findDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _inline_findDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column_inline_find_Text = base.Columns["inline-find_Text"];
                this.columntype = base.Columns["type"];
                this.column_inline_edit_Id = base.Columns["inline-edit_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column_inline_find_Text = new System.Data.DataColumn("inline-find_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.column_inline_find_Text.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_inline_find_Text");
                this.column_inline_find_Text.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_inline_find_TextColumn");
                this.column_inline_find_Text.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_inline_find_Text");
                this.column_inline_find_Text.ExtendedProperties.Add("Generator_UserColumnName", "inline-find_Text");
                base.Columns.Add(this.column_inline_find_Text);
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.column_inline_edit_Id = new System.Data.DataColumn("inline-edit_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_inline_edit_Id");
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_inline_edit_IdColumn");
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_inline_edit_Id");
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_UserColumnName", "inline-edit_Id");
                base.Columns.Add(this.column_inline_edit_Id);
                this.columntype.Namespace = "";
                this.ExtendedProperties.Add("Generator_RowClassName", "_inline_findRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_inline_findRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_inline_findRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_inline_findDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_inline_find");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_inline_find");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_findRow New_inline_findRow() {
                return ((_inline_findRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _inline_findRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_inline_findRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._inline_findRowChanged != null)) {
                    this._inline_findRowChanged(this, new _inline_findRowChangeEvent(((_inline_findRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._inline_findRowChanging != null)) {
                    this._inline_findRowChanging(this, new _inline_findRowChangeEvent(((_inline_findRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._inline_findRowDeleted != null)) {
                    this._inline_findRowDeleted(this, new _inline_findRowChangeEvent(((_inline_findRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._inline_findRowDeleting != null)) {
                    this._inline_findRowDeleting(this, new _inline_findRowChangeEvent(((_inline_findRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_inline_findRow(_inline_findRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_inline_findDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _inline_actionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntype;
            
            private System.Data.DataColumn column_inline_action_Text;
            
            private System.Data.DataColumn column_inline_edit_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_actionDataTable() {
                this.TableName = "inline-action";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _inline_actionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _inline_actionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _inline_action_TextColumn {
                get {
                    return this.column_inline_action_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _inline_edit_IdColumn {
                get {
                    return this.column_inline_edit_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_actionRow this[int index] {
                get {
                    return ((_inline_actionRow)(this.Rows[index]));
                }
            }
            
            public event _inline_actionRowChangeEventHandler _inline_actionRowChanging;
            
            public event _inline_actionRowChangeEventHandler _inline_actionRowChanged;
            
            public event _inline_actionRowChangeEventHandler _inline_actionRowDeleting;
            
            public event _inline_actionRowChangeEventHandler _inline_actionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_inline_actionRow(_inline_actionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_actionRow Add_inline_actionRow(string type, string _inline_action_Text, _inline_editRow _parent_inline_editRowByinline_edit_inline_action) {
                _inline_actionRow row_inline_actionRow = ((_inline_actionRow)(this.NewRow()));
                row_inline_actionRow.ItemArray = new object[] {
                        type,
                        _inline_action_Text,
                        _parent_inline_editRowByinline_edit_inline_action[0]};
                this.Rows.Add(row_inline_actionRow);
                return row_inline_actionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _inline_actionDataTable cln = ((_inline_actionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _inline_actionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype = base.Columns["type"];
                this.column_inline_action_Text = base.Columns["inline-action_Text"];
                this.column_inline_edit_Id = base.Columns["inline-edit_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columntype);
                this.column_inline_action_Text = new System.Data.DataColumn("inline-action_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.column_inline_action_Text.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_inline_action_Text");
                this.column_inline_action_Text.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_inline_action_TextColumn");
                this.column_inline_action_Text.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_inline_action_Text");
                this.column_inline_action_Text.ExtendedProperties.Add("Generator_UserColumnName", "inline-action_Text");
                base.Columns.Add(this.column_inline_action_Text);
                this.column_inline_edit_Id = new System.Data.DataColumn("inline-edit_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_inline_edit_Id");
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_inline_edit_IdColumn");
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_inline_edit_Id");
                this.column_inline_edit_Id.ExtendedProperties.Add("Generator_UserColumnName", "inline-edit_Id");
                base.Columns.Add(this.column_inline_edit_Id);
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "";
                this.ExtendedProperties.Add("Generator_RowClassName", "_inline_actionRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_inline_actionRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_inline_actionRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_inline_actionDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_inline_action");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_inline_action");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_actionRow New_inline_actionRow() {
                return ((_inline_actionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _inline_actionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_inline_actionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._inline_actionRowChanged != null)) {
                    this._inline_actionRowChanged(this, new _inline_actionRowChangeEvent(((_inline_actionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._inline_actionRowChanging != null)) {
                    this._inline_actionRowChanging(this, new _inline_actionRowChangeEvent(((_inline_actionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._inline_actionRowDeleted != null)) {
                    this._inline_actionRowDeleted(this, new _inline_actionRowChangeEvent(((_inline_actionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._inline_actionRowDeleting != null)) {
                    this._inline_actionRowDeleting(this, new _inline_actionRowChangeEvent(((_inline_actionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_inline_actionRow(_inline_actionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_inline_actionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class commentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlang;
            
            private System.Data.DataColumn columncomment_Text;
            
            private System.Data.DataColumn columnedit_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentDataTable() {
                this.TableName = "comment";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal commentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected commentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn comment_TextColumn {
                get {
                    return this.columncomment_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn edit_IdColumn {
                get {
                    return this.columnedit_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow this[int index] {
                get {
                    return ((commentRow)(this.Rows[index]));
                }
            }
            
            public event commentRowChangeEventHandler commentRowChanging;
            
            public event commentRowChangeEventHandler commentRowChanged;
            
            public event commentRowChangeEventHandler commentRowDeleting;
            
            public event commentRowChangeEventHandler commentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddcommentRow(commentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow AddcommentRow(string lang, string comment_Text, editRow parenteditRowByedit_comment) {
                commentRow rowcommentRow = ((commentRow)(this.NewRow()));
                rowcommentRow.ItemArray = new object[] {
                        lang,
                        comment_Text,
                        parenteditRowByedit_comment[0]};
                this.Rows.Add(rowcommentRow);
                return rowcommentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                commentDataTable cln = ((commentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new commentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.columncomment_Text = base.Columns["comment_Text"];
                this.columnedit_Id = base.Columns["edit_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new System.Data.DataColumn("lang", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.columncomment_Text = new System.Data.DataColumn("comment_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columncomment_Text);
                this.columnedit_Id = new System.Data.DataColumn("edit_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnedit_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow NewcommentRow() {
                return ((commentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new commentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(commentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.commentRowChanged != null)) {
                    this.commentRowChanged(this, new commentRowChangeEvent(((commentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.commentRowChanging != null)) {
                    this.commentRowChanging(this, new commentRowChangeEvent(((commentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.commentRowDeleted != null)) {
                    this.commentRowDeleted(this, new commentRowChangeEvent(((commentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.commentRowDeleting != null)) {
                    this.commentRowDeleting(this, new commentRowChangeEvent(((commentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovecommentRow(commentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "commentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class _diy_instructionsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlang;
            
            private System.Data.DataColumn column_diy_instructions_Text;
            
            private System.Data.DataColumn column_action_group_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _diy_instructionsDataTable() {
                this.TableName = "diy-instructions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _diy_instructionsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected _diy_instructionsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _diy_instructions_TextColumn {
                get {
                    return this.column_diy_instructions_Text;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn _action_group_IdColumn {
                get {
                    return this.column_action_group_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _diy_instructionsRow this[int index] {
                get {
                    return ((_diy_instructionsRow)(this.Rows[index]));
                }
            }
            
            public event _diy_instructionsRowChangeEventHandler _diy_instructionsRowChanging;
            
            public event _diy_instructionsRowChangeEventHandler _diy_instructionsRowChanged;
            
            public event _diy_instructionsRowChangeEventHandler _diy_instructionsRowDeleting;
            
            public event _diy_instructionsRowChangeEventHandler _diy_instructionsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Add_diy_instructionsRow(_diy_instructionsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _diy_instructionsRow Add_diy_instructionsRow(string lang, string _diy_instructions_Text, _action_groupRow _parent_action_groupRowByaction_group_diy_instructions) {
                _diy_instructionsRow row_diy_instructionsRow = ((_diy_instructionsRow)(this.NewRow()));
                row_diy_instructionsRow.ItemArray = new object[] {
                        lang,
                        _diy_instructions_Text,
                        _parent_action_groupRowByaction_group_diy_instructions[0]};
                this.Rows.Add(row_diy_instructionsRow);
                return row_diy_instructionsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                _diy_instructionsDataTable cln = ((_diy_instructionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new _diy_instructionsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlang = base.Columns["lang"];
                this.column_diy_instructions_Text = base.Columns["diy-instructions_Text"];
                this.column_action_group_Id = base.Columns["action-group_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlang = new System.Data.DataColumn("lang", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnlang);
                this.column_diy_instructions_Text = new System.Data.DataColumn("diy-instructions_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.column_diy_instructions_Text.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_diy_instructions_Text");
                this.column_diy_instructions_Text.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_diy_instructions_TextColumn");
                this.column_diy_instructions_Text.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_diy_instructions_Text");
                this.column_diy_instructions_Text.ExtendedProperties.Add("Generator_UserColumnName", "diy-instructions_Text");
                base.Columns.Add(this.column_diy_instructions_Text);
                this.column_action_group_Id = new System.Data.DataColumn("action-group_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_action_group_IdColumn");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_action_group_Id");
                this.column_action_group_Id.ExtendedProperties.Add("Generator_UserColumnName", "action-group_Id");
                base.Columns.Add(this.column_action_group_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("one-diy-instructions-per-language", new System.Data.DataColumn[] {
                                this.columnlang}, false));
                this.columnlang.AllowDBNull = false;
                this.columnlang.Unique = true;
                this.columnlang.Namespace = "";
                this.ExtendedProperties.Add("Generator_RowClassName", "_diy_instructionsRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "_diy_instructionsRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "_diy_instructionsRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_TableClassName", "_diy_instructionsDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "_diy_instructions");
                this.ExtendedProperties.Add("Generator_TableVarName", "table_diy_instructions");
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _diy_instructionsRow New_diy_instructionsRow() {
                return ((_diy_instructionsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new _diy_instructionsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(_diy_instructionsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._diy_instructionsRowChanged != null)) {
                    this._diy_instructionsRowChanged(this, new _diy_instructionsRowChangeEvent(((_diy_instructionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._diy_instructionsRowChanging != null)) {
                    this._diy_instructionsRowChanging(this, new _diy_instructionsRowChangeEvent(((_diy_instructionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._diy_instructionsRowDeleted != null)) {
                    this._diy_instructionsRowDeleted(this, new _diy_instructionsRowChangeEvent(((_diy_instructionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._diy_instructionsRowDeleting != null)) {
                    this._diy_instructionsRowDeleting(this, new _diy_instructionsRowChangeEvent(((_diy_instructionsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Remove_diy_instructionsRow(_diy_instructionsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                mod ds = new mod();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "_diy_instructionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class headerRow : System.Data.DataRow {
            
            private headerDataTable tableheader;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal headerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableheader = ((headerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string license {
                get {
                    return ((string)(this[this.tableheader.licenseColumn]));
                }
                set {
                    this[this.tableheader.licenseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int header_Id {
                get {
                    return ((int)(this[this.tableheader.header_IdColumn]));
                }
                set {
                    this[this.tableheader.header_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow[] GettitleRows() {
                return ((titleRow[])(base.GetChildRows(this.Table.ChildRelations["header_title"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow[] GetdescriptionRows() {
                return ((descriptionRow[])(base.GetChildRows(this.Table.ChildRelations["header_description"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_notesRow[] _Getauthor_notesRows() {
                return ((_author_notesRow[])(base.GetChildRows(this.Table.ChildRelations["header_author-notes"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_groupRow[] _Getauthor_groupRows() {
                return ((_author_groupRow[])(base.GetChildRows(this.Table.ChildRelations["header_author-group"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mod_versionRow[] _Getmod_versionRows() {
                return ((_mod_versionRow[])(base.GetChildRows(this.Table.ChildRelations["header_mod-version"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public installationRow[] GetinstallationRows() {
                return ((installationRow[])(base.GetChildRows(this.Table.ChildRelations["header_installation"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public historyRow[] GethistoryRows() {
                return ((historyRow[])(base.GetChildRows(this.Table.ChildRelations["header_history"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metaRow[] GetmetaRows() {
                return ((metaRow[])(base.GetChildRows(this.Table.ChildRelations["header_meta"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class titleRow : System.Data.DataRow {
            
            private titleDataTable tabletitle;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal titleRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletitle = ((titleDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tabletitle.langColumn]));
                }
                set {
                    this[this.tabletitle.langColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title_Text {
                get {
                    return ((string)(this[this.tabletitle.title_TextColumn]));
                }
                set {
                    this[this.tabletitle.title_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int header_Id {
                get {
                    try {
                        return ((int)(this[this.tabletitle.header_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'header_Id\' in table \'title\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletitle.header_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow headerRow {
                get {
                    return ((headerRow)(this.GetParentRow(this.Table.ParentRelations["header_title"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["header_title"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isheader_IdNull() {
                return this.IsNull(this.tabletitle.header_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setheader_IdNull() {
                this[this.tabletitle.header_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class descriptionRow : System.Data.DataRow {
            
            private descriptionDataTable tabledescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal descriptionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledescription = ((descriptionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tabledescription.langColumn]));
                }
                set {
                    this[this.tabledescription.langColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description_Text {
                get {
                    return ((string)(this[this.tabledescription.description_TextColumn]));
                }
                set {
                    this[this.tabledescription.description_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int header_Id {
                get {
                    try {
                        return ((int)(this[this.tabledescription.header_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'header_Id\' in table \'description\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledescription.header_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow headerRow {
                get {
                    return ((headerRow)(this.GetParentRow(this.Table.ParentRelations["header_description"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["header_description"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isheader_IdNull() {
                return this.IsNull(this.tabledescription.header_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setheader_IdNull() {
                this[this.tabledescription.header_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _author_notesRow : System.Data.DataRow {
            
            private _author_notesDataTable table_author_notes;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _author_notesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_author_notes = ((_author_notesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.table_author_notes.langColumn]));
                }
                set {
                    this[this.table_author_notes.langColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _author_notes_Text {
                get {
                    return ((string)(this[this.table_author_notes._author_notes_TextColumn]));
                }
                set {
                    this[this.table_author_notes._author_notes_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int header_Id {
                get {
                    try {
                        return ((int)(this[this.table_author_notes.header_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'header_Id\' in table \'author-notes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_author_notes.header_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow headerRow {
                get {
                    return ((headerRow)(this.GetParentRow(this.Table.ParentRelations["header_author-notes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["header_author-notes"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isheader_IdNull() {
                return this.IsNull(this.table_author_notes.header_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setheader_IdNull() {
                this[this.table_author_notes.header_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _author_groupRow : System.Data.DataRow {
            
            private _author_groupDataTable table_author_group;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _author_groupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_author_group = ((_author_groupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _author_group_Id {
                get {
                    return ((int)(this[this.table_author_group._author_group_IdColumn]));
                }
                set {
                    this[this.table_author_group._author_group_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int header_Id {
                get {
                    try {
                        return ((int)(this[this.table_author_group.header_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'header_Id\' in table \'author-group\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_author_group.header_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow headerRow {
                get {
                    return ((headerRow)(this.GetParentRow(this.Table.ParentRelations["header_author-group"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["header_author-group"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isheader_IdNull() {
                return this.IsNull(this.table_author_group.header_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setheader_IdNull() {
                this[this.table_author_group.header_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public authorRow[] GetauthorRows() {
                return ((authorRow[])(base.GetChildRows(this.Table.ChildRelations["author-group_author"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class authorRow : System.Data.DataRow {
            
            private authorDataTable tableauthor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal authorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableauthor = ((authorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string realname {
                get {
                    try {
                        return ((string)(this[this.tableauthor.realnameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'realname\' in table \'author\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableauthor.realnameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableauthor.emailColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'email\' in table \'author\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableauthor.emailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string username {
                get {
                    return ((string)(this[this.tableauthor.usernameColumn]));
                }
                set {
                    this[this.tableauthor.usernameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string homepage {
                get {
                    try {
                        return ((string)(this[this.tableauthor.homepageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'homepage\' in table \'author\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableauthor.homepageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int author_Id {
                get {
                    return ((int)(this[this.tableauthor.author_IdColumn]));
                }
                set {
                    this[this.tableauthor.author_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _author_group_Id {
                get {
                    try {
                        return ((int)(this[this.tableauthor._author_group_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'author-group_Id\' in table \'author\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableauthor._author_group_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_groupRow _author_groupRow {
                get {
                    return ((_author_groupRow)(this.GetParentRow(this.Table.ParentRelations["author-group_author"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["author-group_author"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrealnameNull() {
                return this.IsNull(this.tableauthor.realnameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrealnameNull() {
                this[this.tableauthor.realnameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableauthor.emailColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableauthor.emailColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshomepageNull() {
                return this.IsNull(this.tableauthor.homepageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethomepageNull() {
                this[this.tableauthor.homepageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_author_group_IdNull() {
                return this.IsNull(this.tableauthor._author_group_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_author_group_IdNull() {
                this[this.tableauthor._author_group_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contributionsRow[] GetcontributionsRows() {
                return ((contributionsRow[])(base.GetChildRows(this.Table.ChildRelations["author_contributions"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class contributionsRow : System.Data.DataRow {
            
            private contributionsDataTable tablecontributions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal contributionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecontributions = ((contributionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    try {
                        return ((string)(this[this.tablecontributions.statusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'status\' in table \'contributions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontributions.statusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime from {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecontributions.fromColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'from\' in table \'contributions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontributions.fromColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime to {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablecontributions.toColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'to\' in table \'contributions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontributions.toColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int author_Id {
                get {
                    try {
                        return ((int)(this[this.tablecontributions.author_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'author_Id\' in table \'contributions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecontributions.author_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public authorRow authorRow {
                get {
                    return ((authorRow)(this.GetParentRow(this.Table.ParentRelations["author_contributions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["author_contributions"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatusNull() {
                return this.IsNull(this.tablecontributions.statusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatusNull() {
                this[this.tablecontributions.statusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfromNull() {
                return this.IsNull(this.tablecontributions.fromColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfromNull() {
                this[this.tablecontributions.fromColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstoNull() {
                return this.IsNull(this.tablecontributions.toColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettoNull() {
                this[this.tablecontributions.toColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isauthor_IdNull() {
                return this.IsNull(this.tablecontributions.author_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setauthor_IdNull() {
                this[this.tablecontributions.author_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _mod_versionRow : System.Data.DataRow {
            
            private _mod_versionDataTable table_mod_version;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _mod_versionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_mod_version = ((_mod_versionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stage {
                get {
                    try {
                        return ((string)(this[this.table_mod_version.stageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'stage\' in table \'mod-version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mod_version.stageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort major {
                get {
                    return ((ushort)(this[this.table_mod_version.majorColumn]));
                }
                set {
                    this[this.table_mod_version.majorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort minor {
                get {
                    return ((ushort)(this[this.table_mod_version.minorColumn]));
                }
                set {
                    this[this.table_mod_version.minorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort revision {
                get {
                    return ((ushort)(this[this.table_mod_version.revisionColumn]));
                }
                set {
                    this[this.table_mod_version.revisionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string release {
                get {
                    try {
                        return ((string)(this[this.table_mod_version.releaseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'release\' in table \'mod-version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mod_version.releaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int header_Id {
                get {
                    try {
                        return ((int)(this[this.table_mod_version.header_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'header_Id\' in table \'mod-version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mod_version.header_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow headerRow {
                get {
                    return ((headerRow)(this.GetParentRow(this.Table.ParentRelations["header_mod-version"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["header_mod-version"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstageNull() {
                return this.IsNull(this.table_mod_version.stageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstageNull() {
                this[this.table_mod_version.stageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreleaseNull() {
                return this.IsNull(this.table_mod_version.releaseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreleaseNull() {
                this[this.table_mod_version.releaseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isheader_IdNull() {
                return this.IsNull(this.table_mod_version.header_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setheader_IdNull() {
                this[this.table_mod_version.header_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class installationRow : System.Data.DataRow {
            
            private installationDataTable tableinstallation;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal installationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableinstallation = ((installationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string level {
                get {
                    return ((string)(this[this.tableinstallation.levelColumn]));
                }
                set {
                    this[this.tableinstallation.levelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong time {
                get {
                    return ((ulong)(this[this.tableinstallation.timeColumn]));
                }
                set {
                    this[this.tableinstallation.timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool _easymod_compliant {
                get {
                    try {
                        return ((bool)(this[this.tableinstallation._easymod_compliantColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'easymod-compliant\' in table \'installation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinstallation._easymod_compliantColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _mod_config {
                get {
                    try {
                        return ((string)(this[this.tableinstallation._mod_configColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'mod-config\' in table \'installation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinstallation._mod_configColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int installation_Id {
                get {
                    return ((int)(this[this.tableinstallation.installation_IdColumn]));
                }
                set {
                    this[this.tableinstallation.installation_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int header_Id {
                get {
                    try {
                        return ((int)(this[this.tableinstallation.header_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'header_Id\' in table \'installation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableinstallation.header_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow headerRow {
                get {
                    return ((headerRow)(this.GetParentRow(this.Table.ParentRelations["header_installation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["header_installation"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_easymod_compliantNull() {
                return this.IsNull(this.tableinstallation._easymod_compliantColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_easymod_compliantNull() {
                this[this.tableinstallation._easymod_compliantColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_mod_configNull() {
                return this.IsNull(this.tableinstallation._mod_configColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_mod_configNull() {
                this[this.tableinstallation._mod_configColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isheader_IdNull() {
                return this.IsNull(this.tableinstallation.header_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setheader_IdNull() {
                this[this.tableinstallation.header_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRow[] _Gettarget_versionRows() {
                return ((_target_versionRow[])(base.GetChildRows(this.Table.ChildRelations["installation_target-version"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _target_versionRow : System.Data.DataRow {
            
            private _target_versionDataTable table_target_version;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_versionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_target_version = ((_target_versionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _target_primary {
                get {
                    return ((string)(this[this.table_target_version._target_primaryColumn]));
                }
                set {
                    this[this.table_target_version._target_primaryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _target_version_Id {
                get {
                    return ((int)(this[this.table_target_version._target_version_IdColumn]));
                }
                set {
                    this[this.table_target_version._target_version_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int installation_Id {
                get {
                    try {
                        return ((int)(this[this.table_target_version.installation_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'installation_Id\' in table \'target-version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_target_version.installation_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public installationRow installationRow {
                get {
                    return ((installationRow)(this.GetParentRow(this.Table.ParentRelations["installation_target-version"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["installation_target-version"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinstallation_IdNull() {
                return this.IsNull(this.table_target_version.installation_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinstallation_IdNull() {
                this[this.table_target_version.installation_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_majorRow[] _Gettarget_majorRows() {
                return ((_target_majorRow[])(base.GetChildRows(this.Table.ChildRelations["target-version_target-major"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_minorRow[] _Gettarget_minorRows() {
                return ((_target_minorRow[])(base.GetChildRows(this.Table.ChildRelations["target-version_target-minor"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_revisionRow[] _Gettarget_revisionRows() {
                return ((_target_revisionRow[])(base.GetChildRows(this.Table.ChildRelations["target-version_target-revision"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_releaseRow[] _Gettarget_releaseRows() {
                return ((_target_releaseRow[])(base.GetChildRows(this.Table.ChildRelations["target-version_target-release"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _target_majorRow : System.Data.DataRow {
            
            private _target_majorDataTable table_target_major;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_majorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_target_major = ((_target_majorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string allow {
                get {
                    try {
                        return ((string)(this[this.table_target_major.allowColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'allow\' in table \'target-major\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_target_major.allowColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort _target_major_Text {
                get {
                    try {
                        return ((ushort)(this[this.table_target_major._target_major_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'target-major_Text\' in table \'target-major\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_target_major._target_major_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _target_version_Id {
                get {
                    try {
                        return ((int)(this[this.table_target_major._target_version_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'target-version_Id\' in table \'target-major\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_target_major._target_version_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRow _target_versionRow {
                get {
                    return ((_target_versionRow)(this.GetParentRow(this.Table.ParentRelations["target-version_target-major"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["target-version_target-major"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsallowNull() {
                return this.IsNull(this.table_target_major.allowColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetallowNull() {
                this[this.table_target_major.allowColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_target_major_TextNull() {
                return this.IsNull(this.table_target_major._target_major_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_target_major_TextNull() {
                this[this.table_target_major._target_major_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_target_version_IdNull() {
                return this.IsNull(this.table_target_major._target_version_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_target_version_IdNull() {
                this[this.table_target_major._target_version_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _target_minorRow : System.Data.DataRow {
            
            private _target_minorDataTable table_target_minor;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_minorRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_target_minor = ((_target_minorDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string allow {
                get {
                    return ((string)(this[this.table_target_minor.allowColumn]));
                }
                set {
                    this[this.table_target_minor.allowColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort _target_minor_Text {
                get {
                    try {
                        return ((ushort)(this[this.table_target_minor._target_minor_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'target-minor_Text\' in table \'target-minor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_target_minor._target_minor_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _target_version_Id {
                get {
                    try {
                        return ((int)(this[this.table_target_minor._target_version_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'target-version_Id\' in table \'target-minor\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_target_minor._target_version_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRow _target_versionRow {
                get {
                    return ((_target_versionRow)(this.GetParentRow(this.Table.ParentRelations["target-version_target-minor"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["target-version_target-minor"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_target_minor_TextNull() {
                return this.IsNull(this.table_target_minor._target_minor_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_target_minor_TextNull() {
                this[this.table_target_minor._target_minor_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_target_version_IdNull() {
                return this.IsNull(this.table_target_minor._target_version_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_target_version_IdNull() {
                this[this.table_target_minor._target_version_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _target_revisionRow : System.Data.DataRow {
            
            private _target_revisionDataTable table_target_revision;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_revisionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_target_revision = ((_target_revisionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string allow {
                get {
                    return ((string)(this[this.table_target_revision.allowColumn]));
                }
                set {
                    this[this.table_target_revision.allowColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort _target_revision_Text {
                get {
                    try {
                        return ((ushort)(this[this.table_target_revision._target_revision_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'target-revision_Text\' in table \'target-revision\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.table_target_revision._target_revision_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stage {
                get {
                    try {
                        return ((string)(this[this.table_target_revision.stageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'stage\' in table \'target-revision\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_target_revision.stageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _target_version_Id {
                get {
                    try {
                        return ((int)(this[this.table_target_revision._target_version_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'target-version_Id\' in table \'target-revision\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_target_revision._target_version_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRow _target_versionRow {
                get {
                    return ((_target_versionRow)(this.GetParentRow(this.Table.ParentRelations["target-version_target-revision"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["target-version_target-revision"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_target_revision_TextNull() {
                return this.IsNull(this.table_target_revision._target_revision_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_target_revision_TextNull() {
                this[this.table_target_revision._target_revision_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstageNull() {
                return this.IsNull(this.table_target_revision.stageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstageNull() {
                this[this.table_target_revision.stageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_target_version_IdNull() {
                return this.IsNull(this.table_target_revision._target_version_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_target_version_IdNull() {
                this[this.table_target_revision._target_version_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _target_releaseRow : System.Data.DataRow {
            
            private _target_releaseDataTable table_target_release;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _target_releaseRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_target_release = ((_target_releaseDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string allow {
                get {
                    return ((string)(this[this.table_target_release.allowColumn]));
                }
                set {
                    this[this.table_target_release.allowColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _target_release_Text {
                get {
                    return ((string)(this[this.table_target_release._target_release_TextColumn]));
                }
                set {
                    this[this.table_target_release._target_release_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _target_version_Id {
                get {
                    try {
                        return ((int)(this[this.table_target_release._target_version_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'target-version_Id\' in table \'target-release\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_target_release._target_version_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRow _target_versionRow {
                get {
                    return ((_target_versionRow)(this.GetParentRow(this.Table.ParentRelations["target-version_target-release"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["target-version_target-release"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_target_version_IdNull() {
                return this.IsNull(this.table_target_release._target_version_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_target_version_IdNull() {
                this[this.table_target_release._target_version_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class historyRow : System.Data.DataRow {
            
            private historyDataTable tablehistory;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal historyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablehistory = ((historyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int history_Id {
                get {
                    return ((int)(this[this.tablehistory.history_IdColumn]));
                }
                set {
                    this[this.tablehistory.history_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int header_Id {
                get {
                    try {
                        return ((int)(this[this.tablehistory.header_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'header_Id\' in table \'history\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablehistory.header_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow headerRow {
                get {
                    return ((headerRow)(this.GetParentRow(this.Table.ParentRelations["header_history"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["header_history"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isheader_IdNull() {
                return this.IsNull(this.tablehistory.header_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setheader_IdNull() {
                this[this.tablehistory.header_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow[] GetentryRows() {
                return ((entryRow[])(base.GetChildRows(this.Table.ChildRelations["history_entry"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class entryRow : System.Data.DataRow {
            
            private entryDataTable tableentry;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal entryRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableentry = ((entryDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date {
                get {
                    return ((System.DateTime)(this[this.tableentry.dateColumn]));
                }
                set {
                    this[this.tableentry.dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int entry_Id {
                get {
                    return ((int)(this[this.tableentry.entry_IdColumn]));
                }
                set {
                    this[this.tableentry.entry_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int history_Id {
                get {
                    try {
                        return ((int)(this[this.tableentry.history_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'history_Id\' in table \'entry\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.history_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public historyRow historyRow {
                get {
                    return ((historyRow)(this.GetParentRow(this.Table.ParentRelations["history_entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["history_entry"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishistory_IdNull() {
                return this.IsNull(this.tableentry.history_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethistory_IdNull() {
                this[this.tableentry.history_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _rev_versionRow[] _Getrev_versionRows() {
                return ((_rev_versionRow[])(base.GetChildRows(this.Table.ChildRelations["entry_rev-version"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changelogRow[] GetchangelogRows() {
                return ((changelogRow[])(base.GetChildRows(this.Table.ChildRelations["entry_changelog"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _rev_versionRow : System.Data.DataRow {
            
            private _rev_versionDataTable table_rev_version;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _rev_versionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_rev_version = ((_rev_versionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stage {
                get {
                    try {
                        return ((string)(this[this.table_rev_version.stageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'stage\' in table \'rev-version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_rev_version.stageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort major {
                get {
                    return ((ushort)(this[this.table_rev_version.majorColumn]));
                }
                set {
                    this[this.table_rev_version.majorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort minor {
                get {
                    return ((ushort)(this[this.table_rev_version.minorColumn]));
                }
                set {
                    this[this.table_rev_version.minorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ushort revision {
                get {
                    return ((ushort)(this[this.table_rev_version.revisionColumn]));
                }
                set {
                    this[this.table_rev_version.revisionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string release {
                get {
                    try {
                        return ((string)(this[this.table_rev_version.releaseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'release\' in table \'rev-version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_rev_version.releaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int entry_Id {
                get {
                    try {
                        return ((int)(this[this.table_rev_version.entry_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'entry_Id\' in table \'rev-version\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_rev_version.entry_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow entryRow {
                get {
                    return ((entryRow)(this.GetParentRow(this.Table.ParentRelations["entry_rev-version"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["entry_rev-version"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstageNull() {
                return this.IsNull(this.table_rev_version.stageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstageNull() {
                this[this.table_rev_version.stageColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreleaseNull() {
                return this.IsNull(this.table_rev_version.releaseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreleaseNull() {
                this[this.table_rev_version.releaseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isentry_IdNull() {
                return this.IsNull(this.table_rev_version.entry_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setentry_IdNull() {
                this[this.table_rev_version.entry_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class changelogRow : System.Data.DataRow {
            
            private changelogDataTable tablechangelog;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal changelogRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablechangelog = ((changelogDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tablechangelog.langColumn]));
                }
                set {
                    this[this.tablechangelog.langColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int changelog_Id {
                get {
                    return ((int)(this[this.tablechangelog.changelog_IdColumn]));
                }
                set {
                    this[this.tablechangelog.changelog_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int entry_Id {
                get {
                    try {
                        return ((int)(this[this.tablechangelog.entry_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'entry_Id\' in table \'changelog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechangelog.entry_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow entryRow {
                get {
                    return ((entryRow)(this.GetParentRow(this.Table.ParentRelations["entry_changelog"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["entry_changelog"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isentry_IdNull() {
                return this.IsNull(this.tablechangelog.entry_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setentry_IdNull() {
                this[this.tablechangelog.entry_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changeRow[] GetchangeRows() {
                return ((changeRow[])(base.GetChildRows(this.Table.ChildRelations["changelog_change"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class changeRow : System.Data.DataRow {
            
            private changeDataTable tablechange;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal changeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablechange = ((changeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string change_Text {
                get {
                    return ((string)(this[this.tablechange.change_TextColumn]));
                }
                set {
                    this[this.tablechange.change_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int changelog_Id {
                get {
                    try {
                        return ((int)(this[this.tablechange.changelog_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'changelog_Id\' in table \'change\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablechange.changelog_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changelogRow changelogRow {
                get {
                    return ((changelogRow)(this.GetParentRow(this.Table.ParentRelations["changelog_change"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["changelog_change"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischangelog_IdNull() {
                return this.IsNull(this.tablechange.changelog_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setchangelog_IdNull() {
                this[this.tablechange.changelog_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class metaRow : System.Data.DataRow {
            
            private metaDataTable tablemeta;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal metaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemeta = ((metaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablemeta.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'name\' in table \'meta\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemeta.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string content {
                get {
                    try {
                        return ((string)(this[this.tablemeta.contentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'content\' in table \'meta\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemeta.contentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int header_Id {
                get {
                    try {
                        return ((int)(this[this.tablemeta.header_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'header_Id\' in table \'meta\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemeta.header_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow headerRow {
                get {
                    return ((headerRow)(this.GetParentRow(this.Table.ParentRelations["header_meta"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["header_meta"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablemeta.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablemeta.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontentNull() {
                return this.IsNull(this.tablemeta.contentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontentNull() {
                this[this.tablemeta.contentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isheader_IdNull() {
                return this.IsNull(this.tablemeta.header_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setheader_IdNull() {
                this[this.tablemeta.header_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _action_groupRow : System.Data.DataRow {
            
            private _action_groupDataTable table_action_group;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _action_groupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_action_group = ((_action_groupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _action_group_Id {
                get {
                    return ((int)(this[this.table_action_group._action_group_IdColumn]));
                }
                set {
                    this[this.table_action_group._action_group_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sqlRow[] GetsqlRows() {
                return ((sqlRow[])(base.GetChildRows(this.Table.ChildRelations["action-group_sql"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public copyRow[] GetcopyRows() {
                return ((copyRow[])(base.GetChildRows(this.Table.ChildRelations["action-group_copy"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public openRow[] GetopenRows() {
                return ((openRow[])(base.GetChildRows(this.Table.ChildRelations["action-group_open"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _diy_instructionsRow[] _Getdiy_instructionsRows() {
                return ((_diy_instructionsRow[])(base.GetChildRows(this.Table.ChildRelations["action-group_diy-instructions"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sqlRow : System.Data.DataRow {
            
            private sqlDataTable tablesql;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sqlRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesql = ((sqlDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dbms {
                get {
                    try {
                        return ((string)(this[this.tablesql.dbmsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'dbms\' in table \'sql\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesql.dbmsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sql_Text {
                get {
                    try {
                        return ((string)(this[this.tablesql.sql_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sql_Text\' in table \'sql\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesql.sql_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _action_group_Id {
                get {
                    try {
                        return ((int)(this[this.tablesql._action_group_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'action-group_Id\' in table \'sql\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesql._action_group_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupRow _action_groupRow {
                get {
                    return ((_action_groupRow)(this.GetParentRow(this.Table.ParentRelations["action-group_sql"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["action-group_sql"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdbmsNull() {
                return this.IsNull(this.tablesql.dbmsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdbmsNull() {
                this[this.tablesql.dbmsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issql_TextNull() {
                return this.IsNull(this.tablesql.sql_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsql_TextNull() {
                this[this.tablesql.sql_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_action_group_IdNull() {
                return this.IsNull(this.tablesql._action_group_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_action_group_IdNull() {
                this[this.tablesql._action_group_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class copyRow : System.Data.DataRow {
            
            private copyDataTable tablecopy;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal copyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecopy = ((copyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int copy_Id {
                get {
                    return ((int)(this[this.tablecopy.copy_IdColumn]));
                }
                set {
                    this[this.tablecopy.copy_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _action_group_Id {
                get {
                    try {
                        return ((int)(this[this.tablecopy._action_group_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'action-group_Id\' in table \'copy\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecopy._action_group_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupRow _action_groupRow {
                get {
                    return ((_action_groupRow)(this.GetParentRow(this.Table.ParentRelations["action-group_copy"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["action-group_copy"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_action_group_IdNull() {
                return this.IsNull(this.tablecopy._action_group_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_action_group_IdNull() {
                this[this.tablecopy._action_group_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow[] GetfileRows() {
                return ((fileRow[])(base.GetChildRows(this.Table.ChildRelations["copy_file"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class fileRow : System.Data.DataRow {
            
            private fileDataTable tablefile;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal fileRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefile = ((fileDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string from {
                get {
                    return ((string)(this[this.tablefile.fromColumn]));
                }
                set {
                    this[this.tablefile.fromColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string to {
                get {
                    return ((string)(this[this.tablefile.toColumn]));
                }
                set {
                    this[this.tablefile.toColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int copy_Id {
                get {
                    try {
                        return ((int)(this[this.tablefile.copy_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'copy_Id\' in table \'file\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefile.copy_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public copyRow copyRow {
                get {
                    return ((copyRow)(this.GetParentRow(this.Table.ParentRelations["copy_file"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["copy_file"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscopy_IdNull() {
                return this.IsNull(this.tablefile.copy_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcopy_IdNull() {
                this[this.tablefile.copy_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class openRow : System.Data.DataRow {
            
            private openDataTable tableopen;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal openRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableopen = ((openDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string src {
                get {
                    return ((string)(this[this.tableopen.srcColumn]));
                }
                set {
                    this[this.tableopen.srcColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int open_Id {
                get {
                    return ((int)(this[this.tableopen.open_IdColumn]));
                }
                set {
                    this[this.tableopen.open_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _action_group_Id {
                get {
                    try {
                        return ((int)(this[this.tableopen._action_group_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'action-group_Id\' in table \'open\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableopen._action_group_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupRow _action_groupRow {
                get {
                    return ((_action_groupRow)(this.GetParentRow(this.Table.ParentRelations["action-group_open"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["action-group_open"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_action_group_IdNull() {
                return this.IsNull(this.tableopen._action_group_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_action_group_IdNull() {
                this[this.tableopen._action_group_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow[] GeteditRows() {
                return ((editRow[])(base.GetChildRows(this.Table.ChildRelations["open_edit"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class editRow : System.Data.DataRow {
            
            private editDataTable tableedit;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal editRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableedit = ((editDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_Id {
                get {
                    return ((int)(this[this.tableedit.edit_IdColumn]));
                }
                set {
                    this[this.tableedit.edit_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int open_Id {
                get {
                    try {
                        return ((int)(this[this.tableedit.open_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'open_Id\' in table \'edit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableedit.open_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public openRow openRow {
                get {
                    return ((openRow)(this.GetParentRow(this.Table.ParentRelations["open_edit"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["open_edit"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isopen_IdNull() {
                return this.IsNull(this.tableedit.open_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setopen_IdNull() {
                this[this.tableedit.open_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public findRow[] GetfindRows() {
                return ((findRow[])(base.GetChildRows(this.Table.ChildRelations["edit_find"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow[] GetactionRows() {
                return ((actionRow[])(base.GetChildRows(this.Table.ChildRelations["edit_action"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_editRow[] _Getinline_editRows() {
                return ((_inline_editRow[])(base.GetChildRows(this.Table.ChildRelations["edit_inline-edit"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow[] GetcommentRows() {
                return ((commentRow[])(base.GetChildRows(this.Table.ChildRelations["edit_comment"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class findRow : System.Data.DataRow {
            
            private findDataTable tablefind;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal findRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablefind = ((findDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string find_Text {
                get {
                    try {
                        return ((string)(this[this.tablefind.find_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'find_Text\' in table \'find\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefind.find_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tablefind.typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'type\' in table \'find\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefind.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_Id {
                get {
                    try {
                        return ((int)(this[this.tablefind.edit_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'edit_Id\' in table \'find\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefind.edit_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow editRow {
                get {
                    return ((editRow)(this.GetParentRow(this.Table.ParentRelations["edit_find"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["edit_find"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfind_TextNull() {
                return this.IsNull(this.tablefind.find_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfind_TextNull() {
                this[this.tablefind.find_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tablefind.typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tablefind.typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isedit_IdNull() {
                return this.IsNull(this.tablefind.edit_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setedit_IdNull() {
                this[this.tablefind.edit_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class actionRow : System.Data.DataRow {
            
            private actionDataTable tableaction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal actionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableaction = ((actionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tableaction.typeColumn]));
                }
                set {
                    this[this.tableaction.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string action_Text {
                get {
                    try {
                        return ((string)(this[this.tableaction.action_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'action_Text\' in table \'action\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaction.action_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_Id {
                get {
                    try {
                        return ((int)(this[this.tableaction.edit_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'edit_Id\' in table \'action\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableaction.edit_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow editRow {
                get {
                    return ((editRow)(this.GetParentRow(this.Table.ParentRelations["edit_action"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["edit_action"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaction_TextNull() {
                return this.IsNull(this.tableaction.action_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaction_TextNull() {
                this[this.tableaction.action_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isedit_IdNull() {
                return this.IsNull(this.tableaction.edit_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setedit_IdNull() {
                this[this.tableaction.edit_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _inline_editRow : System.Data.DataRow {
            
            private _inline_editDataTable table_inline_edit;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _inline_editRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_inline_edit = ((_inline_editDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _inline_edit_Id {
                get {
                    return ((int)(this[this.table_inline_edit._inline_edit_IdColumn]));
                }
                set {
                    this[this.table_inline_edit._inline_edit_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_Id {
                get {
                    try {
                        return ((int)(this[this.table_inline_edit.edit_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'edit_Id\' in table \'inline-edit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_inline_edit.edit_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow editRow {
                get {
                    return ((editRow)(this.GetParentRow(this.Table.ParentRelations["edit_inline-edit"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["edit_inline-edit"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isedit_IdNull() {
                return this.IsNull(this.table_inline_edit.edit_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setedit_IdNull() {
                this[this.table_inline_edit.edit_IdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_findRow[] _Getinline_findRows() {
                return ((_inline_findRow[])(base.GetChildRows(this.Table.ChildRelations["inline-edit_inline-find"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_actionRow[] _Getinline_actionRows() {
                return ((_inline_actionRow[])(base.GetChildRows(this.Table.ChildRelations["inline-edit_inline-action"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _inline_findRow : System.Data.DataRow {
            
            private _inline_findDataTable table_inline_find;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _inline_findRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_inline_find = ((_inline_findDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _inline_find_Text {
                get {
                    try {
                        return ((string)(this[this.table_inline_find._inline_find_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'inline-find_Text\' in table \'inline-find\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_inline_find._inline_find_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.table_inline_find.typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'type\' in table \'inline-find\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_inline_find.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _inline_edit_Id {
                get {
                    try {
                        return ((int)(this[this.table_inline_find._inline_edit_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'inline-edit_Id\' in table \'inline-find\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_inline_find._inline_edit_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_editRow _inline_editRow {
                get {
                    return ((_inline_editRow)(this.GetParentRow(this.Table.ParentRelations["inline-edit_inline-find"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["inline-edit_inline-find"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_inline_find_TextNull() {
                return this.IsNull(this.table_inline_find._inline_find_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_inline_find_TextNull() {
                this[this.table_inline_find._inline_find_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.table_inline_find.typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.table_inline_find.typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_inline_edit_IdNull() {
                return this.IsNull(this.table_inline_find._inline_edit_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_inline_edit_IdNull() {
                this[this.table_inline_find._inline_edit_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _inline_actionRow : System.Data.DataRow {
            
            private _inline_actionDataTable table_inline_action;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _inline_actionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_inline_action = ((_inline_actionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.table_inline_action.typeColumn]));
                }
                set {
                    this[this.table_inline_action.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _inline_action_Text {
                get {
                    try {
                        return ((string)(this[this.table_inline_action._inline_action_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'inline-action_Text\' in table \'inline-action\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_inline_action._inline_action_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _inline_edit_Id {
                get {
                    try {
                        return ((int)(this[this.table_inline_action._inline_edit_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'inline-edit_Id\' in table \'inline-action\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_inline_action._inline_edit_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_editRow _inline_editRow {
                get {
                    return ((_inline_editRow)(this.GetParentRow(this.Table.ParentRelations["inline-edit_inline-action"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["inline-edit_inline-action"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_inline_action_TextNull() {
                return this.IsNull(this.table_inline_action._inline_action_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_inline_action_TextNull() {
                this[this.table_inline_action._inline_action_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_inline_edit_IdNull() {
                return this.IsNull(this.table_inline_action._inline_edit_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_inline_edit_IdNull() {
                this[this.table_inline_action._inline_edit_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class commentRow : System.Data.DataRow {
            
            private commentDataTable tablecomment;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal commentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablecomment = ((commentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.tablecomment.langColumn]));
                }
                set {
                    this[this.tablecomment.langColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment_Text {
                get {
                    try {
                        return ((string)(this[this.tablecomment.comment_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'comment_Text\' in table \'comment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecomment.comment_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_Id {
                get {
                    try {
                        return ((int)(this[this.tablecomment.edit_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'edit_Id\' in table \'comment\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablecomment.edit_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow editRow {
                get {
                    return ((editRow)(this.GetParentRow(this.Table.ParentRelations["edit_comment"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["edit_comment"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscomment_TextNull() {
                return this.IsNull(this.tablecomment.comment_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcomment_TextNull() {
                this[this.tablecomment.comment_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isedit_IdNull() {
                return this.IsNull(this.tablecomment.edit_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setedit_IdNull() {
                this[this.tablecomment.edit_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class _diy_instructionsRow : System.Data.DataRow {
            
            private _diy_instructionsDataTable table_diy_instructions;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal _diy_instructionsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.table_diy_instructions = ((_diy_instructionsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lang {
                get {
                    return ((string)(this[this.table_diy_instructions.langColumn]));
                }
                set {
                    this[this.table_diy_instructions.langColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _diy_instructions_Text {
                get {
                    try {
                        return ((string)(this[this.table_diy_instructions._diy_instructions_TextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'diy-instructions_Text\' in table \'diy-instructions\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.table_diy_instructions._diy_instructions_TextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int _action_group_Id {
                get {
                    try {
                        return ((int)(this[this.table_diy_instructions._action_group_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'action-group_Id\' in table \'diy-instructions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.table_diy_instructions._action_group_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupRow _action_groupRow {
                get {
                    return ((_action_groupRow)(this.GetParentRow(this.Table.ParentRelations["action-group_diy-instructions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["action-group_diy-instructions"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_diy_instructions_TextNull() {
                return this.IsNull(this.table_diy_instructions._diy_instructions_TextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_diy_instructions_TextNull() {
                this[this.table_diy_instructions._diy_instructions_TextColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_action_group_IdNull() {
                return this.IsNull(this.table_diy_instructions._action_group_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_action_group_IdNull() {
                this[this.table_diy_instructions._action_group_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class headerRowChangeEvent : System.EventArgs {
            
            private headerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRowChangeEvent(headerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public headerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class titleRowChangeEvent : System.EventArgs {
            
            private titleRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRowChangeEvent(titleRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public titleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class descriptionRowChangeEvent : System.EventArgs {
            
            private descriptionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRowChangeEvent(descriptionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public descriptionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _author_notesRowChangeEvent : System.EventArgs {
            
            private _author_notesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_notesRowChangeEvent(_author_notesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_notesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _author_groupRowChangeEvent : System.EventArgs {
            
            private _author_groupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_groupRowChangeEvent(_author_groupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _author_groupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class authorRowChangeEvent : System.EventArgs {
            
            private authorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public authorRowChangeEvent(authorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public authorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class contributionsRowChangeEvent : System.EventArgs {
            
            private contributionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contributionsRowChangeEvent(contributionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public contributionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _mod_versionRowChangeEvent : System.EventArgs {
            
            private _mod_versionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mod_versionRowChangeEvent(_mod_versionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _mod_versionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class installationRowChangeEvent : System.EventArgs {
            
            private installationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public installationRowChangeEvent(installationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public installationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _target_versionRowChangeEvent : System.EventArgs {
            
            private _target_versionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRowChangeEvent(_target_versionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_versionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _target_majorRowChangeEvent : System.EventArgs {
            
            private _target_majorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_majorRowChangeEvent(_target_majorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_majorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _target_minorRowChangeEvent : System.EventArgs {
            
            private _target_minorRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_minorRowChangeEvent(_target_minorRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_minorRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _target_revisionRowChangeEvent : System.EventArgs {
            
            private _target_revisionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_revisionRowChangeEvent(_target_revisionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_revisionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _target_releaseRowChangeEvent : System.EventArgs {
            
            private _target_releaseRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_releaseRowChangeEvent(_target_releaseRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _target_releaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class historyRowChangeEvent : System.EventArgs {
            
            private historyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public historyRowChangeEvent(historyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public historyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class entryRowChangeEvent : System.EventArgs {
            
            private entryRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRowChangeEvent(entryRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public entryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _rev_versionRowChangeEvent : System.EventArgs {
            
            private _rev_versionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _rev_versionRowChangeEvent(_rev_versionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _rev_versionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class changelogRowChangeEvent : System.EventArgs {
            
            private changelogRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changelogRowChangeEvent(changelogRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changelogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class changeRowChangeEvent : System.EventArgs {
            
            private changeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changeRowChangeEvent(changeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public changeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class metaRowChangeEvent : System.EventArgs {
            
            private metaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metaRowChangeEvent(metaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public metaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _action_groupRowChangeEvent : System.EventArgs {
            
            private _action_groupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupRowChangeEvent(_action_groupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _action_groupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sqlRowChangeEvent : System.EventArgs {
            
            private sqlRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sqlRowChangeEvent(sqlRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sqlRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class copyRowChangeEvent : System.EventArgs {
            
            private copyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public copyRowChangeEvent(copyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public copyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class fileRowChangeEvent : System.EventArgs {
            
            private fileRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRowChangeEvent(fileRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public fileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class openRowChangeEvent : System.EventArgs {
            
            private openRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public openRowChangeEvent(openRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public openRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class editRowChangeEvent : System.EventArgs {
            
            private editRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRowChangeEvent(editRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public editRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class findRowChangeEvent : System.EventArgs {
            
            private findRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public findRowChangeEvent(findRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public findRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class actionRowChangeEvent : System.EventArgs {
            
            private actionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRowChangeEvent(actionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public actionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _inline_editRowChangeEvent : System.EventArgs {
            
            private _inline_editRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_editRowChangeEvent(_inline_editRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_editRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _inline_findRowChangeEvent : System.EventArgs {
            
            private _inline_findRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_findRowChangeEvent(_inline_findRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_findRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _inline_actionRowChangeEvent : System.EventArgs {
            
            private _inline_actionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_actionRowChangeEvent(_inline_actionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _inline_actionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class commentRowChangeEvent : System.EventArgs {
            
            private commentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRowChangeEvent(commentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public commentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class _diy_instructionsRowChangeEvent : System.EventArgs {
            
            private _diy_instructionsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _diy_instructionsRowChangeEvent(_diy_instructionsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public _diy_instructionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591