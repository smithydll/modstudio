//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ModProjects {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class NewDataSet : DataSet {
        
        private _mod_projectDataTable table_mod_project;
        
        private fileDataTable tablefile;
        
        private DataRelation _relationmod_project_file;
        
        public NewDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected NewDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["mod-project"] != null)) {
                    this.Tables.Add(new _mod_projectDataTable(ds.Tables["mod-project"]));
                }
                if ((ds.Tables["file"] != null)) {
                    this.Tables.Add(new fileDataTable(ds.Tables["file"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _mod_projectDataTable _mod_project {
            get {
                return this.table_mod_project;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fileDataTable file {
            get {
                return this.tablefile;
            }
        }
        
        public override DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["mod-project"] != null)) {
                this.Tables.Add(new _mod_projectDataTable(ds.Tables["mod-project"]));
            }
            if ((ds.Tables["file"] != null)) {
                this.Tables.Add(new fileDataTable(ds.Tables["file"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.table_mod_project = ((_mod_projectDataTable)(this.Tables["mod-project"]));
            if ((this.table_mod_project != null)) {
                this.table_mod_project.InitVars();
            }
            this.tablefile = ((fileDataTable)(this.Tables["file"]));
            if ((this.tablefile != null)) {
                this.tablefile.InitVars();
            }
            this._relationmod_project_file = this.Relations["mod-project_file"];
        }
        
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/mod_project.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-AU");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.table_mod_project = new _mod_projectDataTable();
            this.Tables.Add(this.table_mod_project);
            this.tablefile = new fileDataTable();
            this.Tables.Add(this.tablefile);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("mod-project_file", new DataColumn[] {
                        this.table_mod_project._mod_project_IdColumn}, new DataColumn[] {
                        this.tablefile._mod_project_IdColumn});
            this.tablefile.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this._relationmod_project_file = new DataRelation("mod-project_file", new DataColumn[] {
                        this.table_mod_project._mod_project_IdColumn}, new DataColumn[] {
                        this.tablefile._mod_project_IdColumn}, false);
            this._relationmod_project_file.Nested = true;
            this.Relations.Add(this._relationmod_project_file);
        }
        
        private bool ShouldSerialize_mod_project() {
            return false;
        }
        
        private bool ShouldSerializefile() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void _mod_projectRowChangeEventHandler(object sender, _mod_projectRowChangeEvent e);
        
        public delegate void fileRowChangeEventHandler(object sender, fileRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class _mod_projectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column_build_path;
            
            private DataColumn column_mod_project_Id;
            
            internal _mod_projectDataTable() : 
                    base("mod-project") {
                this.InitClass();
            }
            
            internal _mod_projectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn _build_pathColumn {
                get {
                    return this.column_build_path;
                }
            }
            
            internal DataColumn _mod_project_IdColumn {
                get {
                    return this.column_mod_project_Id;
                }
            }
            
            public _mod_projectRow this[int index] {
                get {
                    return ((_mod_projectRow)(this.Rows[index]));
                }
            }
            
            public event _mod_projectRowChangeEventHandler _mod_projectRowChanged;
            
            public event _mod_projectRowChangeEventHandler _mod_projectRowChanging;
            
            public event _mod_projectRowChangeEventHandler _mod_projectRowDeleted;
            
            public event _mod_projectRowChangeEventHandler _mod_projectRowDeleting;
            
            public void Add_mod_projectRow(_mod_projectRow row) {
                this.Rows.Add(row);
            }
            
            public _mod_projectRow Add_mod_projectRow(string _build_path) {
                _mod_projectRow row_mod_projectRow = ((_mod_projectRow)(this.NewRow()));
                row_mod_projectRow.ItemArray = new object[] {
                        _build_path,
                        null};
                this.Rows.Add(row_mod_projectRow);
                return row_mod_projectRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                _mod_projectDataTable cln = ((_mod_projectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new _mod_projectDataTable();
            }
            
            internal void InitVars() {
                this.column_build_path = this.Columns["build-path"];
                this.column_mod_project_Id = this.Columns["mod-project_Id"];
            }
            
            private void InitClass() {
                this.column_build_path = new DataColumn("build-path", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column_build_path);
                this.column_mod_project_Id = new DataColumn("mod-project_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.column_mod_project_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.column_mod_project_Id}, true));
                this.column_mod_project_Id.AutoIncrement = true;
                this.column_mod_project_Id.AllowDBNull = false;
                this.column_mod_project_Id.Unique = true;
            }
            
            public _mod_projectRow New_mod_projectRow() {
                return ((_mod_projectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new _mod_projectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(_mod_projectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._mod_projectRowChanged != null)) {
                    this._mod_projectRowChanged(this, new _mod_projectRowChangeEvent(((_mod_projectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._mod_projectRowChanging != null)) {
                    this._mod_projectRowChanging(this, new _mod_projectRowChangeEvent(((_mod_projectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._mod_projectRowDeleted != null)) {
                    this._mod_projectRowDeleted(this, new _mod_projectRowChangeEvent(((_mod_projectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._mod_projectRowDeleting != null)) {
                    this._mod_projectRowDeleting(this, new _mod_projectRowChangeEvent(((_mod_projectRow)(e.Row)), e.Action));
                }
            }
            
            public void Remove_mod_projectRow(_mod_projectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class _mod_projectRow : DataRow {
            
            private _mod_projectDataTable table_mod_project;
            
            internal _mod_projectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.table_mod_project = ((_mod_projectDataTable)(this.Table));
            }
            
            public string _build_path {
                get {
                    try {
                        return ((string)(this[this.table_mod_project._build_pathColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.table_mod_project._build_pathColumn] = value;
                }
            }
            
            public bool Is_build_pathNull() {
                return this.IsNull(this.table_mod_project._build_pathColumn);
            }
            
            public void Set_build_pathNull() {
                this[this.table_mod_project._build_pathColumn] = System.Convert.DBNull;
            }
            
            public fileRow[] GetfileRows() {
                return ((fileRow[])(this.GetChildRows(this.Table.ChildRelations["mod-project_file"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class _mod_projectRowChangeEvent : EventArgs {
            
            private _mod_projectRow eventRow;
            
            private DataRowAction eventAction;
            
            public _mod_projectRowChangeEvent(_mod_projectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public _mod_projectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fileDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnpath;
            
            private DataColumn columnbuild;
            
            private DataColumn column_mod_project_Id;
            
            internal fileDataTable() : 
                    base("file") {
                this.InitClass();
            }
            
            internal fileDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            internal DataColumn buildColumn {
                get {
                    return this.columnbuild;
                }
            }
            
            internal DataColumn _mod_project_IdColumn {
                get {
                    return this.column_mod_project_Id;
                }
            }
            
            public fileRow this[int index] {
                get {
                    return ((fileRow)(this.Rows[index]));
                }
            }
            
            public event fileRowChangeEventHandler fileRowChanged;
            
            public event fileRowChangeEventHandler fileRowChanging;
            
            public event fileRowChangeEventHandler fileRowDeleted;
            
            public event fileRowChangeEventHandler fileRowDeleting;
            
            public void AddfileRow(fileRow row) {
                this.Rows.Add(row);
            }
            
            public fileRow AddfileRow(string path, string build, _mod_projectRow _parent_mod_projectRowBymod_project_file) {
                fileRow rowfileRow = ((fileRow)(this.NewRow()));
                rowfileRow.ItemArray = new object[] {
                        path,
                        build,
                        _parent_mod_projectRowBymod_project_file[1]};
                this.Rows.Add(rowfileRow);
                return rowfileRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fileDataTable cln = ((fileDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fileDataTable();
            }
            
            internal void InitVars() {
                this.columnpath = this.Columns["path"];
                this.columnbuild = this.Columns["build"];
                this.column_mod_project_Id = this.Columns["mod-project_Id"];
            }
            
            private void InitClass() {
                this.columnpath = new DataColumn("path", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnpath);
                this.columnbuild = new DataColumn("build", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnbuild);
                this.column_mod_project_Id = new DataColumn("mod-project_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.column_mod_project_Id);
                this.columnpath.Namespace = "";
                this.columnbuild.Namespace = "";
            }
            
            public fileRow NewfileRow() {
                return ((fileRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fileRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fileRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fileRowChanged != null)) {
                    this.fileRowChanged(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fileRowChanging != null)) {
                    this.fileRowChanging(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fileRowDeleted != null)) {
                    this.fileRowDeleted(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fileRowDeleting != null)) {
                    this.fileRowDeleting(this, new fileRowChangeEvent(((fileRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefileRow(fileRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fileRow : DataRow {
            
            private fileDataTable tablefile;
            
            internal fileRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefile = ((fileDataTable)(this.Table));
            }
            
            public string path {
                get {
                    try {
                        return ((string)(this[this.tablefile.pathColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefile.pathColumn] = value;
                }
            }
            
            public string build {
                get {
                    try {
                        return ((string)(this[this.tablefile.buildColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefile.buildColumn] = value;
                }
            }
            
            public _mod_projectRow _mod_projectRow {
                get {
                    return ((_mod_projectRow)(this.GetParentRow(this.Table.ParentRelations["mod-project_file"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mod-project_file"]);
                }
            }
            
            public bool IspathNull() {
                return this.IsNull(this.tablefile.pathColumn);
            }
            
            public void SetpathNull() {
                this[this.tablefile.pathColumn] = System.Convert.DBNull;
            }
            
            public bool IsbuildNull() {
                return this.IsNull(this.tablefile.buildColumn);
            }
            
            public void SetbuildNull() {
                this[this.tablefile.buildColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fileRowChangeEvent : EventArgs {
            
            private fileRow eventRow;
            
            private DataRowAction eventAction;
            
            public fileRowChangeEvent(fileRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fileRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
